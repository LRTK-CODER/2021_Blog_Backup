{"pages":[],"posts":[{"title":"HTML Injection - Reflected(GET &amp; POST)","text":"Get문제와 Post문제는 동일한 방법으로 진행됨으로 Get문제 풀이만 하겠다. Low문제 제목이 HTML 인젝션이니 확인을 위해 First Name에 HTML 태그를 입력하겠다. &lt;h1&gt;test&lt;/h1&gt; 입력하니 HTML 태그가 그대로 적용이 되어있다. HTML 태그가 적용이 된다는 것은 자바스크립트도 적용이 된다는 뜻으로 이어갈 수 있다. &lt;script&gt;alert(document.cookie)&lt;/script&gt; 자바스크립트로 Cookie 값을 출력하였다.이런식으로 신뢰하지 못하는 사용자가 입력을 할 수 있는 입력은 검증이 필요하다. Medium문제의 난이도가 올라갔으니 입력 값에 대한 검증이 있을 것이다.그래도 일단 확인을 위해 Low Level처럼 HTML 태그를 입력하겠다. &lt;h1&gt;test&lt;/h1&gt; HTML 태그가 적용이 되지 않고 그대로 출력된 것을 확인 할 수 있다. php 소스코드를 확인을 안했다는 하에 추측상으로 &lt;, &gt;, /이 치환되었다고 생각할 수 있다.치환을 우회할 수 있는 방법을 검색하였다. 검색 결과 Double Url Encoding을 통해 우회할 수 있다는 정보를 얻을 수 있었다.이를 이용하기 위해서 &lt;, &gt;, /을 Url 인코딩하여 입력하겠다. 12345from urllib import parsestring = input()parameter = { 'substitution' : string }print( parse.urlencode(parameter, encoding='UTF-8', doseq=True) ) Online Url Encoding : https://www.convertstring.com/ko/EncodeDecode/UrlEncode 파이썬 코드와 온라인 Url인코딩을 이용하여 &lt;script&gt;alert(document.cookie)&lt;/script&gt;을 Double Url Encoing하였다. %253cscript%253ealert(document.cookie)%253c%252fscript%253e 사실 이렇게 안해도 form에 Url Encoding만 넣어줘도 자동으로 특수문자가 Url Coding이 되기 때문에 굳이 Url에 Double Url Encoding을 직접 입력하지 않고, form에 Url 인코딩만 넣어도 된다. Xss를 성공했으니, 어떻게 &lt;, &gt;, /를 치환했는지 확인하겠다. functions_external.php의 xss_check_1함수를 확인하였다. 1234567891011121314function xss_check_1($data){ // Converts only &quot;&lt;&quot; and &quot;&gt;&quot; to HTLM entities $input = str_replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;, $data); $input = str_replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;, $input); // Failure is an option // Bypasses double encoding attacks // &lt;script&gt;alert(0)&lt;/script&gt; // %3Cscript%3Ealert%280%29%3C%2Fscript%3E // %253Cscript%253Ealert%25280%2529%253C%252Fscript%253E $input = urldecode($input); return $input;} 확인해보니, &lt;, &gt;를 이스케이핑으로 php의 str_replace을 사용하여 치환하였다.하지만 Url 인코딩으로 서버에서는 %253c으로 입력받기 때문에 치환을 우회할 수 있었다. HighHigh 단계는 거의 우회하기 힘든 단계이다.소스코드를 살펴보도록 하겠다. 123456function xss_check_2($data){ // htmlentities - converts all applicable characters to HTML entities return htmlentities($data, ENT_QUOTES); } htmlentities()을 이용하여 xss를 검증하고 있다. htmlentities()은 밑과 같은 문자를 치환하는 함수이다. &amp;는 &amp;amp;가 됩니다 &quot;는 ENT_NOQUOTES를 설정하지 않았을 때 &amp;quot;가 됩니다. '(홑따옴표)는 ENT_QUOTES가 설정되었을 때만 &amp;#039;가 됩니다. &lt;(미만)은 &amp;lt;가 됩니다. &gt;(이상)은 &amp;gt;가 됩니다. Url Encoding이란?정확히는 **퍼센트 인코딩(Percent Encoding)**이 맞지만, 흔히 Url에서 사용되어 Url 인코딩으로 불리고 있다.퍼센트 인코딩은 Url에서 사용할 수 없는 문자(특수문자, 예약문자 등등)을 사용할 수 있도록 인코딩한다. 인코딩된 문자는 triplet(트리플렛, 세개가 한묶음)로 인코딩되며, 인코딩된 문자는 %로 시작한다. 그 뒤의 두 숫자는 16진수로 표현된다. [참고 사이트] 욕망의개발자(네이버 블로그) : https://m.blog.naver.com/PostView.nhn?blogId=j880825&amp;logNo=221231640609&amp;proxyReferer=https:%2F%2Fwww.google.com%2F 퍼센트 인코딩(위키백과) : https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%84%BC%ED%8A%B8_%EC%9D%B8%EC%BD%94%EB%94%A9 Double Url Encoding이란?쉽게 말하면 Url 인코딩을 다시 한번 더 Url 인코딩을 한 것이다. 이 공격 기술은 흔히 공격 기술처럼 예상치 못한 동작을 유발하기 위해 2번 인코딩을 한 것이다.가능한 이유는 웹서버가 다양한 인코딩 형식으로 클라이언트 요청을 수락하고 처리하기 때문이다. 이스케이핑이란?HTML 코드는 브라우저에 의해서 해석되는 약속된 문자들이다.주로, 웹사이트에 HTML 태그 본 그래로 출력하려고 하는데 브라우저에서는 바로 HTML로 출력하게 된다. 이 떄문에 이스케이핑을 사용하여 HTML 태그를 출력하게 한다. [참고 사이트] 생활코딩 : https://opentutorials.org/course/1469/2824","link":"/2020/12/07/HTML-Injection-Reflected-GET/"},{"title":"HTML Injection - Stored(Blog)","text":"Low일단 HTML 태그가 실행되는지 확인을 하겠다. HTML 태그가 실행이 되는거 보니, 입력에 대한 검증이 없는 것 같다. 자바스크립트가 실행이 되었으며, 입력된 스크립트는 저장이 되어 페이자가 실행될 때 마다 Cookie 값을 출력한다. 이상하게 코드가 전혀 다른 기능인 sqli_check_3함수를 실행시키고 있다.하지만 기능은 xss_check_1이 실행되는 거로 판단이 된다. Medium, High도 HTML Injection_Reflected(GET)과 같이 작동하는 것로 추측된다. 해당 풀이도 같으니, 더 작성하지는 않겠다.","link":"/2020/12/07/HTML-Injection-Stored-Blog/"},{"title":"HTML Injection - Reflected(URL)","text":"Low들어가보니 딸랑 이거 뿐이다.문제의 제목을 보니 URL이니깐 URL에 HTML 태그를 넣어주면 반영해주는 것 같다. Burp Suite를 사용하여 URL에 HTML 태그를 넣어줬다. ?&lt;h1&gt;test&lt;/h1&gt; 12345678910GET /bWAPP/htmli_current_url.php?&lt;h1&gt;test&lt;/h1&gt; HTTP/1.1Host: 192.168.219.111Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7Cookie: PHPSESSID=a10521c7e9d86bd7482f26f136d6cbe2; security_level=0Connection: close 여기서 직접 Url창에 입력하지 않은 이유는 Url창에 입력하여 서버에 요청을 하면 브라우저에서 특수문자를 Url Encoding을 하여 요청을 보내기 때문이다.하지만 HTML Injection - Reflected(GET)에서는 됬는데 왜 여기서는 안되는 이유는 이 문제의 php 기능 중에 Url Decoding을 하지 않기 때문이다. 12// $url = &quot;http://&quot; . $_SERVER[&quot;HTTP_HOST&quot;] . urldecode($_SERVER[&quot;REQUEST_URI&quot;]);$url = &quot;http://&quot; . $_SERVER[&quot;HTTP_HOST&quot;] . $_SERVER[&quot;REQUEST_URI&quot;]; Burp Suite을 사용하면 문자열 그대로 요청이 되기 때문에 Burp Suite를 사용한 것이다. Medium이 문제는 취약점이 실행되지 않는다. 1$url = &quot;&lt;script&gt;document.write(document.URL)&lt;/script&gt;&quot;; Medium Level에서는 URL를 document.write을 이용하여 페이지에 출력을 한다.문제는 자바스크립트로 실행되기 때문에 마지막에 실행된다는 점을 이용한 취약점이다. (브라우저에서 자바스크립트 소스코드를 마지막에 실행시킨다.) 취약점의 이름은 DOM Xss라고 한다.하지만 지금은 모든 브라우저에서 패치를 했는지, Iternet Expoler에서도 실행이 안된다. 12345678910GET /bWAPP/htmli_current_url.php#&lt;h1&gt;test&lt;/h1&gt; HTTP/1.1Host: 192.168.219.111Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7Cookie: PHPSESSID=a10521c7e9d86bd7482f26f136d6cbe2; security_level=1Connection: close URL 뒤에 #은 fragment이라고 한다.fragment은 브라우저 내부에서 사용되는 값이다. High1$url = &quot;http://&quot; . $_SERVER[&quot;HTTP_HOST&quot;] . xss_check_3($_SERVER[&quot;REQUEST_URI&quot;]); HTML Injection - Reflected(GET)의 High Level에서 봤던 xss_check_3을 사용하여 검증했다.취약점은 못찾았다. DOM Xss이란?정확한 명칭은 DOM Based Xss이라고 한다.(type-0 Xss이라고도 불리기도 함.)DOM Xss은 브라우저에서 DOM 렌더링에서 실행되는 Xss공격이다. DOM에 대한 지식이 필요함으로 밑에 적은 블로그의 글을 읽고 이해하시면 된다. [참고 사이트] WIT블로그 : https://wit.nts-corp.com/2019/02/14/5522","link":"/2020/12/07/HTML-Injection-Reflected-URL/"},{"title":"OS Injection Blind","text":"Blind Command Injection이란?시스템 명령의 수행 결과 값이 없이 수행하는 Injection 공격이다. LowForm에 IP나 도메인을 입력하면 Ping을 보내는 페이지인 것 같다.DNS 서버인 8.8.8.8를 입력하여 어떻게 출력되는지 확인하였다. Did you captured our GOLDEN packet?이라는 문구만 출력이 되고, 잘 작동되는지도 모르겠다.그래서 확실한 오류를 일으키고자, 입력 값을 넣지 않고 서버에 넘겨보았다. IP를 입력하라는 문구가 나오는 것을 확인할 수 있었다.빈 입력 값을 검증하는 코드가 있는 것 같다. 다른 방법으로 현재 나의 집 라우터에 없는 주소를 입력하여 오류를 일으켜보겠다.DNS 서버의 IP을 넘겨줄 때랑 같은 문구를 확인 할 수 있었다.문제의 이름처럼 Blind로 이루어진 페이지로 확인이 되었다. 이제 OS Command Injection 문제처럼 다중 명령어를 사용하여 Command Injection을 시도하였다. 8.8.8.8 &amp; echo hi!! &gt;&gt; test.txt를 입력해주었다.나는 Injection 잘 수행이 되었는지 확인하기 위해서 test.txt를 생성하였다. 또 다른 확인 방법은 Netcat을 이용하여 확인하는 방법이 있다. 서버에 Injection 입력 값을 넘겨주고, 파일이 잘 생성됬는지 확인하였다.http://localhost/bWAPP/test.txt 잘 생성이 된 것을 확인할 수 있다. 이 취약점을 이용하여 악성코드를 이처럼 만들 수도 있고, 아니면 파일을 삭제를 할 수 있다. Source Codefunctions_external.php 123function no_check($data){ return $data;} commandi_blind.php 1234567891011121314151617181920212223if($target == &quot;&quot;){ echo &quot;&lt;font color=\\&quot;red\\&quot;&gt;Please enter your IP address...&lt;/font&gt;&quot;;}else{ echo &quot;Did you captured our GOLDEN packet?&quot;; if(PHP_OS == &quot;Windows&quot; or PHP_OS == &quot;WINNT&quot; or PHP_OS == &quot;WIN32&quot;){ // Debugging // echo &quot;Windows!&quot;; // Increasing the PING count will slow down your web scanner! shell_exec(&quot;ping -n 1 &quot; . commandi($target)); } else{ // Debugging // echo &quot;Not Windows!&quot;; // Increasing the PING count will slow down your web scanner! shell_exec(&quot;ping -c 1 &quot; . commandi($target)); }} 코드를 보니 입력 값을 검사하는 항목은 빈 입력을 검사하는 것 밖에 없다. Medium아마 OS Command Injection 문제의 Medium Leval처럼 특정 문자를 치환하는 것으로 방어를 할 것으로 생각되지만 일단 해보겠다. 8.8.8.8 | echo Hi!! Medium &gt;&gt; test.txt을 입력하여 제대로 생성이 됬는지 확인하였다.예상대로 OS Command Injection 문제와 똑같이 방어를 한 것으로 추측된다. Source Code123456function commandi_check_1($data){ $input = str_replace(&quot;&amp;&quot;, &quot;&quot;, $data); $input = str_replace(&quot;;&quot;, &quot;&quot;, $input); return $input; } 파이프(|)가 치환되지 않았다. 또한 Command Injection에 많이 쓰이는 {}, (), $ 등등 다른 것들도 치환하지 않는 것을 확인할 수 있었다. High123function commandi_check_2($data){ return escapeshellcmd($data); } 이에 대한 설명은 OS Command Injection에서 확인하면 된다.Link : http://lrtk-github.io/2020/12/12/OS-Injection/","link":"/2020/12/13/OS-Injection-Blind/"},{"title":"OS Injection","text":"리눅스 다중 명령어 세미클론(;) : 하나의 라인에 주어진 명령어들을 성공,실패와 관련 없이 전부 실행한다. 파이프(|) : 앞 명령어의 실행 결과를 뒤 명령어에 전달하여 실행한다. 더블 버티컬바(||) : 앞에서부터 순차적으로 실행하되, 명령 실행에 성공하면 뒤에 오는 명령을 실행하지 않는다. 엠퍼센트(&amp;) : 앞의 명령어를 백그라운드로 돌리고 동시에 뒤의 명령어를 실행한다. 더블 엠퍼센트(&amp;&amp;) : 앞에서부터 순차적으로 실행하되, 명령 실행에 실패할 경우 뒤에 오는 명령은 실행하지 않는다. Lowform에 nslookup 명령어 인자값을 전달 받아서 nslookup을 실행하는 페이지인 것 같다.리눅스의 다중 명령어를 삽입하였다. www.nsa.gov &amp; ls -al commandi.php 성공한 것을 보니 아마 검증이 없는 것 같다. Source Code123function no_check($data){ return $data; } 코드를 보니 검증이 없었다. MediumLow Level에 시도한 &amp;은 검증을 통해 제거가 된 것 같다.또한 nslookup 결과도 안뜨는 것을 보니 특정 문자가 있으면 넘어온 데이터를 제거를 하는 것 같다. 현 입력에서 쓸 수 있는 다중 명령어(;, |)도 블랙리스트에 들어있는지 확인 하였다. www.nsa.gov | ls -al commandi.php 파이프는 블랙리스트에 없던 것으로 결과가 나왔다. Source Code123456function commandi_check_1($data){ $input = str_replace(&quot;&amp;&quot;, &quot;&quot;, $data); $input = str_replace(&quot;;&quot;, &quot;&quot;, $input); return $input; } 소스코드를 보니 역시 파이프(|)는 검증에 넣지 않은 모습을 확인 할 수 있었다.하지만 좀 이상한 것은 특정 문자가 있으면 지워서 반환을 하는데 nslookup 명령어는 왜 실행이 안된는 것은 디버깅을 통해 알아봐야 할 것 같다. Hight시도하였지만 모두 통하지 않았다…또한 다중 명령어 말고도 \\n, $()으로도 우회를 시도하였지만 차단되었다. Source Code123function commandi_check_2($data){ return escapeshellcmd($data);} escapeshellcmd 함수를 이용하여 OS Command Injection를 방어한 것을 확인 할 수 있었다. escapeshellcmd이란?link : https://www.php.net/manual/en/function.escapeshellcmd.php OS Injection에 사용될 수있는 문자열의 모든 문자를 이스케이프하는 함수이다. [ 치환 목록 ]&amp; # ; ` | * ? ~ &lt;&gt; ^ () [] {} $ \\ \\x0A \\xFF 이 문자는 앞에 \\를 붙어서 치환이 된다.또한 ', &quot;은 하나의 쌍으로 되었을 때만 치환이 된다. escapeshellcmd 함수의 우회법은 몇가지가 있어서 추후에 우회를 시도하겠다.","link":"/2020/12/12/OS-Injection/"},{"title":"PHP Code Injection","text":"PHP Code Injection이란?웹 어플리케이션을 통해 PHP 코드를 입력하면, 웹 어플리케이션의 입력을 정상적으로 인식하여 개발자가 의도와는 다르게 내부에 있는 PHP 코드를 실행하는 취약점이다. Low페이지를 들어가니 This is just a test page, reflecting back your message...이라는 문구를 확인 할 수 있었다. 123&lt;p&gt;This is just a test page, reflecting back your &lt;a href=&quot;/bWAPP/phpi.php?message=test&quot;&gt;message&lt;/a&gt;...&lt;/p&gt; message를 자세히보니 a태그로 되어있는 것을 확인할 수 있었다. 클릭하여 넘어가보니, 서버에 message이라는 변수에 test를 넘어갔다.페이지에 그대로 test라는 문구가 써져있는 것을 확인할 수 있었다. 저는 message에 php 내장 함수를 넘겨서 어떻게 작동하는지 확인해보았다.http://localhost/bWAPP/phpi.php?message=exec(id) 실행이 잘되는 것을 확인할 수 있었다. Source Code123456if(isset($_REQUEST[&quot;message&quot;])){ // If the security level is not MEDIUM or HIGH if($_COOKIE[&quot;security_level&quot;] != &quot;1&quot; &amp;&amp; $_COOKIE[&quot;security_level&quot;] != &quot;2&quot;){ &lt;p&gt;&lt;i&gt;&lt;?php @eval (&quot;echo &quot; . $_REQUEST[&quot;message&quot;] . &quot;;&quot;);?&gt;&lt;/i&gt;&lt;/p&gt; }} 코드를 보니 message 변수에 넘기고, 아무 검증 없이 eval 함수를 이용하여 바로 출력하여 페이지에 반영하는 것을 볼 수 있다. Medium &amp; High 이번엔 검증이 추가가 되었는지 Low Level에서 했던 방법이 안된다.도통 모르겠어서 소스코드를 확인해보았다. Source Code1234// If the security level is MEDIUM or HIGHelse{ &lt;p&gt;&lt;i&gt;&lt;?php echo htmlspecialchars($_REQUEST[&quot;message&quot;], ENT_QUOTES, &quot;UTF-8&quot;);;?&gt;&lt;/i&gt;&lt;/p&gt;} 확인해보니 Medium &amp; High Level 같은 방어 방법으로 해결을 하였다.바로 htmlspecialchars 함수를 이용하여 특수 문자를 필터링하여 Injection을 방어하였다.","link":"/2020/12/16/PHP-Code-Injection/"},{"title":"SQL Injection(AJAX, JSON, JQUERY)","text":"Low보시는 것과 같이 첫번째 SQL Injection과 같은 문제가 나왔다.차이점이라면 자바스크립트를 사용하여 서버로 넘겨서 데이터를 받았다는 것이다. 개발자 도구를 이용하여 자바스크립트를 확인하겠다. 1234567891011121314151617181920212223242526272829303132$(&quot;#title&quot;).keyup(function(){ // Searches for a movie title var search = {title: $(&quot;#title&quot;).val()}; // AJAX call $.getJSON(&quot;sqli_10-2.php&quot;, search, function(data){ init_table(); // Constructs the table from the JSON data var total = 0; $.each(data, function(key, val){ total++; $(&quot;#table_yellow tr:last&quot;).after(&quot;&lt;tr&gt;&lt;td&gt;&quot; + val.title + &quot;&lt;/td&gt;&lt;td align='center'&gt;&quot; + val.release_year + &quot;&lt;/td&gt;&lt;td&gt;&quot; + val.main_character + &quot;&lt;/td&gt;&lt;td align='center'&gt;&quot; + val.genre + &quot;&lt;/td&gt;&lt;td align='center'&gt;&lt;a href='http://www.imdb.com/title/&quot; + val.imdb + &quot;' target='_blank'&gt;Link&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;); }); // Empty result if (total == 0) { $(&quot;#table_yellow tr:last&quot;).after(&quot;&lt;tr height='30'&gt;&lt;td colspan='5' width='580'&gt;No movies were found!&lt;/td&gt;&lt;/tr&gt;&quot;); } })});function init_table(){ $(&quot;#table_yellow&quot;).html(&quot;&lt;tr height='30' bgcolor='#ffb717' align='center'&gt;&quot; + &quot;&lt;td width='200'&gt;&lt;b&gt;Title&lt;/b&gt;&lt;/td&gt;&quot; + &quot;&lt;td width='80'&gt;&lt;b&gt;Release&lt;/b&gt;&lt;/td&gt;&quot; + &quot;&lt;td width='140'&gt;&lt;b&gt;Character&lt;/b&gt;&lt;/td&gt;&quot; + &quot;&lt;td width='80'&gt;&lt;b&gt;Genre&lt;/b&gt;&lt;/td&gt;&quot; + &quot;&lt;td width='80'&gt;&lt;b&gt;IMDb&lt;/b&gt;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; );} 위와 같이 자바스크립트의 JQUERY를 이용하여 입력한 데이터를 받았다.그 후 AJAX로 데이터를 sqli_10-2.php로 넘겼다.한번 sqli_10-2.php에 Injection 코드를 넘겨보겠다. sqli_10-2.php에게 받은 데이터는 JSON 형식으로 영화 데이터였다. 이와 같이 꼭 HTML의 Form만 아니라 다양한 입력 방식을 통해서 Injection 가능하다는 것을 배울 수 있었다. Source Codefunctions_external.php 123function no_check($data){ return $data; } sqli_10_2.php 1234567891011if(!empty($_GET[&quot;title&quot;])){ // Retrieves the movie title $title = $_GET[&quot;title&quot;]; // Constructs the query $sql = &quot;SELECT * FROM movies WHERE title LIKE '%&quot; . sqli($title) . &quot;%'&quot;; // Queries the database $recordset = mysql_query($sql, $link);} 위와 같이 입력 데이터에 아무 검증 없이 sql문에 넣는 것을 확인 할 수 있었다. Medium &amp; High2문제는 추후에 우회 방법을 찾는대로 업로드하겠다.","link":"/2020/12/20/SQL-Injection-AJAX-JSON-JQUERY/"},{"title":"SQL Injection(Get&amp;Post&#x2F;Select)","text":"Low이전 문제인 Search 페이지와 유사한 페이지가 나왔다.차이점은 사용자 직접 입력을 하지 않고, HTML 태그의 Option 태그를 이용하여 선택하는 방식으로 변경이 되었다. 나는 개발자 도구와 URL 창에서 서버에 보내주는 movie 변수의 값을 변경하여 SQL Injection하였다. 123456789101112&lt;select name=&quot;movie&quot;&gt; &lt;option value=&quot;1&quot;&gt;G.I. Joe: Retaliation&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;Iron Man&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;Man of Steel&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;Terminator Salvation&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;The Amazing Spider-Man&lt;/option&gt; &lt;option value=&quot;6&quot;&gt;The Cabin in the Woods&lt;/option&gt; &lt;option value=&quot;7&quot;&gt;The Dark Knight Rises&lt;/option&gt; &lt;option value=&quot;8&quot;&gt;The Fast and the Furious&lt;/option&gt; &lt;option value=&quot;9&quot;&gt;The Incredible Hulk&lt;/option&gt; &lt;option value=&quot;10&quot;&gt;World War Z&lt;/option&gt;&lt;/select&gt; 개발자 도구를 이용하여 option 태크의 value 속성을 변경하였다.&lt;option value=&quot;'&quot;&gt;G.I. Joe: Retaliation&lt;/option&gt; 그 후, 서버로 보내서 확인하니 Error 메시지가 출력되는 것을 확인할 수 있었다. 2번째 방법인 URL 창을 이용하는 방법은 영화를 선택한 후 서버로 보내고 난 후의 URL의 파라미터를 이용하여 Injection을 하였다.정상 : /bWAPP/sqli_2.php?movie=1&amp;action=goInjection : /bWAPP/sqli_2.php?movie=1 or 1=1&amp;action=go 여기서 의문이 생길 것이다. 왜 '를 입력하지 않는지그 이유는 이 페이지에선 Id값 즉, 정수를 입력받아 처리하기 때문에 ‘’이 필요가 없다.그래서 Injecion할 때 '를 쓰지 않았다. 위의 Injection이 오류 없이 실행이 된 모습이다.하지만 출력된 데이터는 단 하나 뿐이다. 추측 상으로 단 하나의 데이터만 출력되겠끔 설계되어 있는 것 같다. 만약 여기에 Union 기반 Injection을 시도한다면, 맨 아래에 출력되기 때문에 앞에 출력된 데이터가 출력이 안되게 해야한다.방법은 간단하다. 1=1이라는 참을 거짓으로 만드면 된다. 물론 조건인 or를 and로 변경하여 해당 값 자체를 거짓으로 만들어야한다. 입력 : /bWAPP/sqli_2.php?movie=1 and 1=0 union select 1,2,3,4,5,6,7 그 이후에는 SQL Injection Search 문제를 참고하면 된다. Source Codefunctions_external.php 123function no_check($data){ return $data;} sqli_2.php 1234567891011121314151617if(isset($_GET[&quot;movie&quot;])){ $id = $_GET[&quot;movie&quot;]; $sql = &quot;SELECT * FROM movies&quot;; // If the user selects a movie if($id) { $sql.= &quot; WHERE id = &quot; . sqli($id); } $recordset = mysql_query($sql, $link);} $sql.= &quot; WHERE id = &quot; . sqli($id);를 보면 우리가 입력 받은 값을 아무 검증 없이 sql문에 넣는 모습를 볼 수 있다. Medium123function sqli_check_2($data){ return mysql_real_escape_string($data); } mysql_real_escape_string 함수의 우회 방법은 찾는대로 업로드하겠습니다. High이 문제는 High 문제가 없다.","link":"/2020/12/20/SQL-Injection-Get-Post-Select/"},{"title":"SQL Injection(Get&amp;Post&#x2F;Search)","text":"Low페이지를 보니 영화를 검색하는 페이지인 것 같다.어떤 영화가 있는지 잘 모르겠어서 Form에 a만 입력하여 검색을 해보았다. 영화 제목에 a가 들어간 영화가 출력이 되었다.SQL에 에러를 일으켜서 어떤 에러가 일어나는지 확인을 하였다. 입력값 : '현재 사용 중인 DB는 Mysql인 것으로 확인할 수 있었다.이와 같이 에러를 발생시켜서 에러 메시지로부터 DB 정보를 얻어내는 기법을 Error Based Injection이라고 한다. 또한 추측상으로 select ~~~ from ~~~ where '입력값';으로 이루어진 sql문이라고 추측을 해본다. 그래서 입력을 '을 했을 때 오류가 뜬 이유가 select ~~~ from ~~~ where ''';으로 되어서 오류가 출력된 것으로 생각을 한다. Error Based Injection으로도 볼 수 있는 '1'='1'을 이용하여 모든 데이터를 출력하겠다. 입력값 : ' or '1'='1잘 먹히는 것을 볼 수 있다.다른 SQL Injection 공격 방법인 Union Based SQL Injecion를 시도하여 영화의 데이터가 저장된 테이블에 몇 개의 컬럼이 있는지 확인하겠다. 입력값 : ' union select 1,2,3,4,5,6,7#페에지에 나온 컬럼(Title, Release, Character, Genre, IMDb) 5개 이상으로 생각하여 15부터 시작하였고, 17 때에 성공하였다.테이블 제일 밑에 Union에 의해 합쳐서 출력된 1~7을 보니 1은 나타나지 않고 2부터 나타났다. 또한 7도 나타나지 않았다.아마 1번째 컬럼은 ID 컬럼으로 추측이 되고, 7번째 컬럼은 확인을 해봐야하겠다. 입력값 : ' union select 1,table_name,3,4,5,6,7 from information_schema.tables#DB의 메타데이터를 통해 DB에 저장된 테이블명을 출력하였다.관련이 있어보이는 movies이라는 테이블을 찾을 수 있었다. 이 테이블의 컬럼명을 얻어보겠다. 입력값 : ' union select 1,column_name,3,4,5,6,7 from information_schema.columns where table_name='movies'#확인해보니 7번째 컬럼은 tickets_stock이라는 이름을 가진 컬럼으로 알 수 있었다. Source Codefunctions_external.php 123function no_check($data){ return $data;} sqli_1.php 12345678910111213if(isset($_GET[&quot;title&quot;])){ $title = $_GET[&quot;title&quot;]; $sql = &quot;SELECT * FROM movies WHERE title LIKE '%&quot; . sqli($title) . &quot;%'&quot;; $recordset = mysql_query($sql, $link); if(!$recordset){ // die(&quot;Error: &quot; . mysql_error()); &lt;tr height=&quot;50&quot;&gt; &lt;td colspan=&quot;5&quot; width=&quot;580&quot;&gt;&lt;?php die(&quot;Error: &quot; . mysql_error()); ?&gt;&lt;/td&gt; &lt;/tr&gt;} 입력 데이터에 대한 검증이 없다. 또한 Mysql에 Error가 발생하면 그대로 출력하는 코드도 있다. MediumSource CodeMedium 123function sqli_check_1($data){ return addslashes($data);} High 123function sqli_check_2($data){ return mysql_real_escape_string($data);} addslashes 함수는 iFrame Injection에서 설명을 보면 된다. mysql_real_escape_string 함수는 PHP에서 SQL Injection 공격 등을 방어하기 위하여 특수 문자를 치환하기 위한 함수이다. [치환되는 문자] \\x00 \\n \\r \\ ‘, “ \\x1a 위 문자들은 문자 앞에 \\를 붙여서 해당 문자가 작동하지 않도록 치환해준다. 이 두가지 함수를 우회하는 방법이 인터넷에서 몇가지가 있는데 시도를 해보니, 모두 실패하였다.이 부분은 추후에 보강하겠다.","link":"/2020/12/18/SQL-Injection-Get-Search/"},{"title":"SSI Injection","text":"Server Side Includes이란?HTML 페이지에 사용하는 지시어로, 페이지를 서비스할 때 서버가 처리한다.SSI를 사용하면 CGI 프로그램이나 다른 동적인 기술로 페이지 전체를 만들어서 서비스하지 않고도 HTML 페이지에 동적으로 생성한 내용을 추가할 수 있다. 즉, SSI을 이용하여 악성행위를 Injection할 경우 SSI은 그 지시를 받고 동적으로 페이지를 생성할 것이다. HTML로만 작성된 웹문서와는 달리 SSI코드가 들어있는 파일의 이름은 .shtml이라는 확장자를 가진다. * CGI : Web 서버에서 외부 프로그램과 통신하는 방법을 정의하는 스크립트 또는 프로그램 Low페이지를 보니 BeeBox 웹서버의 IP 주소를 조회하는 기능을 가진 페이지인 것 같다.First Name과 Last Name에 test, test를 입력하여 어떻게 결과가 나오는 확인하였다. Form에 입력했던 값이 그대로 나오고, 밑에 BeeBox 웹서버의 IP 주소이 출력되었다.또한 출력된 페이지는 확장자가 ssii.shtml의 이름을 가진 SSI 파일으로 확인되었다. Form에 SSI 지시어와 HTML 태그를 입력해보았다. First Name : &lt;h1&gt;test&lt;/h1&gt;Last Name : test HTML 태그가 그대로 적용이 된 것을 확인할 수 있었다.이번엔 SSI 지시어를 사용하여 Injection 하겠다. First Name : &lt;!--#exec cmd=&quot;ls&quot; --&gt;Last Name : test Source Codefunctions_external.php 123function no_check($data){ return $data;} ssii.php 12345678910111213141516if($firstname == &quot;&quot; or $lastname == &quot;&quot;){ $field_empty = 1;}else{ $line = '&lt;p&gt;Hello ' . $firstname . ' ' . $lastname . ',&lt;/p&gt;&lt;p&gt;Your IP address is:' . '&lt;/p&gt;&lt;h1&gt;&lt;!--#echo var=&quot;REMOTE_ADDR&quot; --&gt;&lt;/h1&gt;'; // Writes a new line to the file $fp = fopen(&quot;ssii.shtml&quot;, &quot;w&quot;); fputs($fp, $line, 200); fclose($fp); header(&quot;Location: ssii.shtml&quot;); exit;} 빈 입력값을 검증하는 항목은 있지만, 입력값은 그대로 출력한다. MediumLow Level에서 확인해봤던 HTML 태그를 입력해봤더니, 그대로 출력이 되었다.&lt;, &gt;, / 3개의 특수 문자 검증이 없을 것으로 추측이 된다. &quot;, '도 검증 없이 출력이 되는지 확인하겠다.First Name : &lt;!--#exec cmd=&quot;ls&quot; --&gt;Last Name : test 결과는 막힌 것으로 확인되었다. &quot;, '을 검사하여, 치환된 것으로 추측이 된다. First Name : &lt;!--#exec cmd=ls --&gt;Last Name : test &quot;, '을 제거 후 출력 결과를 보니 SSI 지시어가 잘 실행되는 것을 확인 할 수 있었다. Source Code123456function xss_check_4($data){ // addslashes - returns a string with backslashes before characters that need to be quoted in database queries etc. // These characters are single quote ('), double quote (&quot;), backslash (\\) and NUL (the NULL byte). // Do NOT use this for XSS or HTML validations!!! return addslashes($data);} addslashes 함수는 iFrame Injection 문제에서 확인할 수 있다.Link : http://lrtk-github.io/2020/12/09/iFrame-Injection-1/ High123456789function xss_check_3($data, $encoding = &quot;UTF-8&quot;){ // htmlspecialchars - converts special characters to HTML entities // '&amp;' (ampersand) becomes '&amp;amp;' // '&quot;' (double quote) becomes '&amp;quot;' when ENT_NOQUOTES is not set // &quot;'&quot; (single quote) becomes '&amp;#039;' (or &amp;apos;) only when ENT_QUOTES is set // '&lt;' (less than) becomes '&amp;lt;' // '&gt;' (greater than) becomes '&amp;gt;' return htmlspecialchars($data, ENT_QUOTES, $encoding);} htmlspecialchars 함수도 iFrame Injection 문제에서 확인할 수 있다.","link":"/2020/12/16/SSI-Injection/"},{"title":"iFrame Injection","text":"LowbWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250 Url를 보면 robots.txt을 iFrame에 넣어서 출력한다.ParamUrl을 robots.txt말고 다른 링크을 넣으면 출력이 되는지 확인하였다. bWAPP/iframei.php?ParamUrl=index.php&amp;ParamWidth=250&amp;ParamHeight=250 출력이 되는 모습을 볼 수 있다.여기서는 아무 악성 행위가 없는 사이트를 넣어지만, 만약 Xss가 들어있는 사이트를 넣으면 공격을 시도 할 수도 있다. 소스 코드를 확인하면, 바로 url를 출력하는 것을 확인 할 수 있다. 123function no_check($data){ return $data;} Medium물론 안되겠지만, Low처럼 index.php를 불려오도록 하겠다.bWAPP/iframei.php?ParamUrl=index.php&amp;ParamWidth=250&amp;ParamHeight=250 역시 보완이 되었는지 index.php가 출력이 안된 것을 확인할 수 있다.Url의 파라미터를 확인해보니, iframe의 옵션으로 확인 할 수 있다. 이것들을 이용한다면, Xss나 iFrame Injection이 가능할 것 같다.이를 위해, 개발자 도구를 이용하여 해당 파라미터가 어떻게 넣어지는지를 확인하였다. Url의 파라미터에 아무 값을 안 넣고 소스 코드를 확인하였을 때의 모습이다.bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250 1&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt; 가장 마지막 파라미터에 test를 입력하여 소스 코드를 확인하였다.bWAPP/iframei.php?ParamUrl=test&amp;ParamWidth=test1&amp;ParamHeight=test2 1&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;test2&quot; width=&quot;test1&quot;&gt;&lt;/iframe&gt; src는 robots.txt가 고정으로 확인되었다. 아마 다른 링크를 넣는 것을 방지하기 위함으로 추측이 된다.하지만, 다른 파라미터는 값을 넣을 수 있다. 이를 이용하여 iFrame Injection하겠다. ParamWidth에 &quot;&gt;&lt;/iframe&gt;&lt;iframe src='index.php' height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt;을 추가하여 Injection을 시도하겠다. 1&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt; 전혀 변경된 것이 없다. 생각을 하면, &lt;, &gt;, /을 지웠다면, 지워진 나머지 문자열은 남아있어야 하는데 전혀 볼 수가 없다.그래서 ParamWidth와 ParamHeight에 &lt;/test&gt;을 넣어서 확인해봤다. bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&quot;&lt;/test&gt;&amp;ParamHeight=250&quot;&lt;/test&gt; 1&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;250\\&quot; &lt;=&quot;&quot; test=&quot;&quot;&gt;&quot; width=&quot;250\\&quot;&lt;/test&gt;&quot;&gt;&lt;/iframe&gt; 뭔가 이상하게 되었다. 하지만, ParamWidth에 넣었을 때와 다르게 소스코드에 넣어졌기 때문에 다시 한번 ParamWidth에 넣었던 &quot;&gt;&lt;/iframe&gt;&lt;iframe src='index.php' height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt;을 넣어서 시도하였다. bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250&quot;&gt;&lt;/iframe&gt;&lt;iframe src='index.php' height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt; 12&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;250\\&quot;&gt;&lt;/iframe&gt;&lt;iframe src=&quot;\\'index.php\\'&quot; height=&quot;\\&amp;quot;250\\&amp;quot;&quot; width=&quot;\\&amp;quot;250\\&amp;quot;&quot;&gt;&lt;/iframe&gt; iframe Injection이 성공한 것을 확인할 수 있다. 이제 어떻게 iframe Injection을 방어했는지 소스 코드를 확인하겠다. Source Code1234567function xss_check_4($data){ // addslashes - returns a string with backslashes before characters that need to be quoted in database queries etc. // These characters are single quote ('), double quote (&quot;), backslash (\\) and NUL (the NULL byte). // Do NOT use this for XSS or HTML validations!!! return addslashes($data);} addslashes 함수를 사용하여 유효성 검사를 하였다. addslashes 함수Link : http://www.w3big.com/ko/php/func-string-addslashes.html addslashes 함수는 데이터베이스에 특수 문자를 넣을 경우 예상치 못한 오류를 발생하는 것을 치환하여 방지하는 함수이다. [ 치환되는 문자 ] ‘ “ \\ NULL 이 문자들은 출력이 될 때 앞에 \\이 붙는다. 소스 코드의 주석을 보면 Xss과 HTML의 유효성 검사로는 쓰지말라는 주의가 적혀져 있다. High12345678910function xss_check_3($data, $encoding = &quot;UTF-8&quot;){ // htmlspecialchars - converts special characters to HTML entities // '&amp;' (ampersand) becomes '&amp;amp;' // '&quot;' (double quote) becomes '&amp;quot;' when ENT_NOQUOTES is not set // &quot;'&quot; (single quote) becomes '&amp;#039;' (or &amp;apos;) only when ENT_QUOTES is set // '&lt;' (less than) becomes '&amp;lt;' // '&gt;' (greater than) becomes '&amp;gt;' return htmlspecialchars($data, ENT_QUOTES, $encoding); } HTML Injection의 High Level처럼 htmlspecialchars 함수를 사용하여 유효성 검사를 하였다.","link":"/2020/12/09/iFrame-Injection-1/"},{"title":"백준 브론즈5 - 1001번 문제","text":"백준 1001번 문제A-BLink : https://www.acmicpc.net/problem/1001 1print(int(input())-int(input())) 1000번 문제처럼 데이터를 입력받아 정수형으로 변환하여 -를 해주었다.하지만 결과는? 런타임 에러이유는 모르겠다… 혹시 아시는 분은 댓글 부탁드립니다… 일단 입력값은 ‘3 2’이다. 이를 입력받아야히는데 어떻게 입력을 받아야할까? 123a, b = input().split()print(a)print(b) split함수를 사용하면 하나의 input함수로 여러 변수에 값을 넣어줄 수 있다. splitLink : https://wikidocs.net/13#split split함수는 문자열을 나누는 함수이다. 12s = 'a b c d'print(s.split()) # ['a', 'b', 'c', 'd'] 출력 list로 return되어지만, input에는 각 하나씩 입력되어 변수에 저장될 것이다.이를 이용해서 문제를 해결해보자. 12a, b = input().split()print(int(a)-int(b)) input은 문자열로 데이터를 넣어주기 때문에 값을 계산하기 위해서는 정수 변환이 필수이다.하지만 입력받은 정수가 100개라면? 하나하나 int함수를 넣어서 계산해야하나?답은 map함수에 있다. mapLink : https://wikidocs.net/32#map map(f, iterable)로 함수(f)와 반복 가능한(iterable) 자료형을 입력받아 f에 iterable를 넣어서 f의 결과를 묶어서 돌려주는 함수이다.","link":"/2020/11/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EB%93%9C5-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈4 - 1008번 문제","text":"백준 1008번 문제A / B두 정수 A와 B를 입력받은 다음, A/B를 출력하는 프로그램을 작성하시오.Link : https://www.acmicpc.net/problem/1008 1print(eval(input().replace(' ', '/'))) eval을 이용하여 문제 풀이를 하였다.eval이 무엇인지 궁금하신 분들은 백준 브론즈5 - 1000번 문제에서 설명하였다.Link : lrtk-coder.github.io/2020/11/07/백준-브론즈5-1001번-문제/","link":"/2020/12/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-1008%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈4 - 9498번 문제","text":"백준 9498번 문제시험 성적시험 점수를 입력받아 90 ~ 100점은 A, 80 ~ 89점은 B, 70 ~ 79점은 C, 60 ~ 69점은 D, 나머지 점수는 F를 출력하는 프로그램을 작성하시오.Link : https://www.acmicpc.net/problem/9498 123456a = int(input())if 90 &lt;= a &lt;= 100: print('A')elif 80 &lt;= a &lt;= 89: print('B')elif 70 &lt;= a &lt;= 79: print('C')elif 60 &lt;= a &lt;= 69: print('D')else: print('F') if문을 사용하여 문제를 해결하였다. 하지만 문제를 한 줄로 해결할 수 있다.문제에서는 10단위 씩 나누어 점수 평가를 하였다. 즉, 입력된 점수의 10의 자리를 알면 점수를 줄 수 있다는 것이다. 1print('FFFFFFDCBA'[int(input())//10]) 인덱싱를 사용하여 한 줄로 해결하였다.여기서 주의할 점은 Index은 시작이 0부터 시작함으로 총 11개의 평가 점수를 입력해주었다. IndexLink : https://wikidocs.net/14 12345list = [1, 2, 3]str = '123'print(list[2]) # 출력 : 3print(str[1]) # 출력 : 2 이런식으로 문자열, 리스트, 튜플, 딕셔너리 등에 유용하게 쓸 수 있다. Slicing12345list = [1, 2, 3]str = '123'print(list[0:2]) # 출력 : 3print(str[1:]) # 출력 : 2 Index로 범위를 지정하여 그 범위 안에 있는 데이터를 출력한다.","link":"/2020/12/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-1330%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 1000번 문제","text":"백준 1000번 문제A+BLink : https://www.acmicpc.net/problem/1000 1print(int(input())+int(input())) 간단하게 생각할 수 있는 코드이다.input로 값을 입력받아 int 함수를 이용하여 문자에서 정수로 데이터타입을 변경하여 더하여 print 함수를 이용하여 출력하였다. 이 코드를 좀 더 python스럽게 만들어 보자. 1print(eval('+'.join(input()))) eval, join 함수를 사용하여 python스럽게 아주 간단하게 변경되었다.join과 eval에 대하여 알아보자. 문자열 삽입(join)Link : https://wikidocs.net/13#join 문자열의 문자 사이에 문자를 삽입하는 함수이다. 1print('+'.join('1234')) # 1+2+3+4 출력 위와 같이 문자열인 1234의 문자 사이에 +를 삽입되었다.python스럽게 고친 코드도 이를 이용하여 입력 받은 문자열에 +를 삽입하였다.허나 이상한 부분이 있다. join은 문자열의 문자 사이에 문자를 넣은 함수이지 계산을 하는 함수는 아니다.그럼 어떻게 계산을 할 수 있을지는 eval함수에 답이 있다. evalLink : https://wikidocs.net/32#eval eval함수는 실행 가능한 문자열을 실행한 결과값을 돌려주는 마법의 함수이다. 1234print(&quot;'Hi' + '!!!'&quot;) # 'Hi' + '!!!' 출력print(eval(&quot;'Hi' + '!!!'&quot;)) # Hi!!! 출력print(eval('+'.join('1234'))) # 10 출력 위와 같이 실행 가능한 문자를 실행해주는 함수이다.자세한 예제를 보고 싶다면 programiz 사이트에서 참고하면 좋다. Link : https://www.programiz.com/python-programming/methods/built-in/eval","link":"/2020/11/07/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 1271번 문제","text":"백준 1271번 문제엄청난 부자2link : https://www.acmicpc.net/problem/1271 12a, b = map(int, input().split())print(f'{a//b}\\n{a%b}') 1001번 문제와 같은 방식으로 풀이를 했다.다만 틀린 점은 print함수의 문자열 앞에 f가 있다는 점이다.f의 뜻은 fomat이라는 뜻이다. 원래 이 기능은 생긴지 얼마 안되었다.이 기능이 없기 전까지는 print(‘{0}\\n{1}’.fomat(a//b, a%b))와 같이 fomat함수를 사용하였다.하지만 가독성이 떨어져서 문자열 앞에 f를 표시하는 것으로 변경되었고, 문자열 안에 바로 변수를 선언하여서 가독성을 높였다. 이제 좀 더 python스럽게 변경해보자. 1print(*divmod(*map(int,input().split()))) 특이한 것이 있다. 저 *은 무엇인가?? 곱하기인가?아니다. *은 파이썬이 지원하는 많은 연산자 중 하나인 Asterisk이다. Asterisk파이썬에서는 *는 곱셈 이상의 여러 의미를 갖는 연산이 가능케한다. 그 중 위의 코드는 컨테이너 타입의 데이터를 Unpacking할 때 쓰이는 Asterisk이다. 12345print('None Asterlisk : ', map(int, input().split()), '\\n')# None Asterlisk : &lt;map object at 0x10e4f20a0&gt; 출력print('Asterlisk : ', *map(int, input().split()), '\\n')# Asterlisk : 100 10 출력 123456a = [1, 2, 3, 4]print('None Asterlisk : ', a, '\\n')# None Asterlisk : [1, 2, 3, 4] print('Asterlisk : ', *a, '\\n')# Asterlisk : 1 2 3 4 예시 코드를 보니 아주 명확하게 구별이 가능했다.혹시 더 알아보고 싶으면 아래의 링크로 알아보면 된다.link : https://mingrammer.com/understanding-the-asterisk-of-python/ *은 해결했으니, divmod함수를 알아보자. divmodlink : https://wikidocs.net/32#divmod divmod함수는 이름 뜻대로 두 개의 인자값을 나눈 몫과 나머지를 튜플 형태로 return 해주는 함수이다. 12345print(divmod(7,3))# (2, 1) 출력print(divmod(100, 10))# (10, 0) 출력","link":"/2020/11/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1271%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 1550번 문제","text":"백준 1550번 문제16진수link : https://www.acmicpc.net/problem/1550 1print(int(input(), 16)) int함수에 옵션을 주어서 간단하게 문제를 해결하였다. int함수의 옵션은 밑의 주소에서 확인하면 된다.link : https://wikidocs.net/32#int","link":"/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1550%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 2338번 문제","text":"백준 2338번 문제긴자리 계산link : https://www.acmicpc.net/problem/2338 12a, b = map(int, input().split())print(f'{a+b}\\n{a-b}\\n{a*b}') 1271번 문제풀이 방식으로 문제 풀이를 하였다. 이렇게 제출해도 정답으로 인정 받지만, 예제 입력을 보면 한 줄이 아닌 두 줄로 입력을 하고 있다. 이점을 걸리신 분들은 다음과 같은 방식으로 코드를 수정하면 된다. 12a, b = map(int, open(0))print(f'{a+b}\\n{a-b}\\n{a*b}') 이 방식은 정해진 변수에 계속 입력을 받을 수 있고, stdout방식이 아닌 EOF방식으로 출력이 된다.stdout방식과 EOF방식이 무엇일까?두 개의 방식을 설명하기 앞서 선행되어야 하는 것이 입출력이 무엇인지를 알아야한다. 입출력쉽게 말해 프로그램에게 데이터를 주는 것이 입력이고, 데이터를 모니터로 보여주게 하는 것이 출력이다. 스트림우리가 데이터를 입력할 때 주로 무엇을 사용할까요? 바로 키보드와 마우스입니다.키보드와 마우스를 사용하여 프로그램에게 데이터를 전달해야하는데 전달해주는 것이 바로 **표준 입력 스트림(stdin)**입니다. 프로그램에서 모니터, 프린터로 전달하는 것은 **표준 출력 스트림(stdout)**이라고 합니다. 이 외에도 오류 출력용인 **표준 에러 스트림(stderr)**가 있습니다. 이것들은 input함수, print함수를 사용하면 생성이되고 입력과 출력이 끝나면 자동으로 종료가 됩니다. EOFEOF(End Of File)은 더 이상 데이터가 없음을 의미합니다.왜 open(0)은 EOF방식 출력이라고 제가 표현 했을까요? open(0)은 입력 받는 것이 무한 반복 하기 때문입니다.그 때문에 프로그램에게 EOF을 알려 줘야 무한 입력이 끝나고, 값이 출력될 수 있기 때문에 EOF방식 출력이라고 표현했습니다. – 출론 –그럼 왜 open(0)이 무한 입력이 될까요?open함수는 파일을 읽기 위해 주로 사용되는 함수입니다. 즉, 파일 입력 함수이죠.open함수의 대표적인 인자값은 open(file, mode)입니다.그런데 파일이 0이다? open함수 입장에서는 읽을 데이터가 없으니 직접 데이터를 입력하라고 입력창을 띄어주는 것 같습니다. 이에 대해서는 python의 open함수 코드를 열어봐서 분석할 예정입니다.","link":"/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2338%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 2475번 문제","text":"백준 2475번 문제검증수link : https://www.acmicpc.net/problem/2475 12a, b, c, e, f = map(int, input().split())print((a**2 + b**2 + c**2 + e**2 + f**2)%10) **은 제곱근을 의미한다. a**2 =&gt; a^2를 의미 위 코드를 python스럽게 변경해보자. 1print( sum( a**2 for a in map(int, input().split()) )%10 ) 보기 좋게 한 줄로 표현이 되었다.근데 이상하게 print함수 안에 for문이 들어가 있다.이 형식은 제너레이터 표현라고 한다. itertorlink : https://bluese05.tistory.com/55 itertor - 제너레이터 - 제너레이터 표현 순으로 봐야 좀 더 이해가 쉽다. itertor은 next 메소드로 데이터를 순차적으로 호출 가능한 object이다. 12345678x = [1, 2, 3]print(type(x), '\\n') # &lt;class 'list'&gt; 출력y = iter(x)print(type(y), '\\n') #&lt;class 'list_iterator'&gt; for i in range(4): print(next(y)) # 1 2 3 출력 이와 같이 iter함수를 사용하여 iterator 형식으로 변환할 수 있다.하지만 우리는 반복문을 쓸 때 next 메소드를 쓴 적이 없다.이유는 파이썬 내부에서 임시로 list를 iterator로 자동 변환해주기 때문이다. generatorlink : https://bluese05.tistory.com/56 제너레이터는 iterator를 반환하는 함수이다.제너레이터는 일반적인 함수와 비슷하게 보이지만, 차이점이 있다.yield라는 존재가 그 차이점이다. 12345678910111213141516171819202122232425def ex(n): i = 0 while i &lt; n: yield i i += 1 while i &gt; n: yield print(i, 'no!!') break return idef test(): a = 10000 return aprint(*ex(-2), '\\n') # 0 no!!# None 출력print(*ex(3), '\\n') # 0 1 2 출력 print(i, '\\n') # 3 출력print(test()) # 10000 출력print(a) # 0 출력 yield함수가 끝나면 함수 안의 변수들은 메모리 상에서 clear된다.하지만 yield를 사용한 경우는 다른 형식으로 흘려간다.함수에서 yield를 만나면, 해당 함수는 그 상태로 정지가 되어 next 메소드를 호출한 쪽으로 yield를 전달하게 된다.이 후 해당 함수는 종료되는 것이 아니라, 함수 내부 데이터가 메모리에 그대로 유지하고 실행된다. 위의 예제 코드에서 ex함수가 종료되어도 ex함수의 i 변수의 데이터가 메모리에 남아 있는 것을 알 수 있다. generator expreession제너레이터 표현은 제너레이터를 쉽게 사용할 수 있도록 해준다.list comprehension과 비슷하지만, [] 대신 ()를 사용하면 된다. 1234567891011121314151617s = [1,2,3,4,5]print('--list comprehension--')[print(i) for i in s]print('\\n')# --list comprehension--# 1# 2# 3# 4# 5 출력print('--generator expreession--')(print(i) for i in s)# --generator expreession--# &lt;generator object &lt;genexpr&gt; at 0x113b3a890&gt; 출력 복잡한데 왜 사용할까?사용하는 이유는 성능 때문이다. 일반적인 for문을 돌리는 것보다 generator expreession과 list comprehension형식으로 돌리는게 속도와 메모리가 성능이 좋다. 다른 방식들도 있는데 이는 밑의 링크를 참고하면 된다.link : https://mingrammer.com/introduce-comprehension-of-python/","link":"/2020/11/12/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2475%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 2557 &amp; 2558번 문제","text":"백준 2557번 문제Hello Worldlink : https://www.acmicpc.net/problem/2557 1print('Hello World!') 백준 2558번 문제A+B - 2link : https://www.acmicpc.net/problem/2558 1print(sum(a for a in map(int, input().split()))) 1print(sum(map(int, open(0)))) 각각 코드는 2475번, 2338번 문제 코드를 활용하여 문제 풀이를 하였다.","link":"/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2557%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 2845번 문제","text":"백준 2845번 문제파티가 끝나고 난 뒤link : https://www.acmicpc.net/problem/2845 123a = [b for b in map(int, open(0))]c = a[0]*a[1]print(a[2]-c, a[3]-c, a[4]-c, a[5]-c, a[6]-c) 2338번 문제 풀이를 응용하여 풀이를 하였다.하지만 python스러운 코드는 아니다. 좀 더 변경하겠다. 1234r = lambda : map(int, input().split())A,B = r()[print(x-A*B) for x in r()] lambda함수를 이용하여 python스럽게 코드를 수정하였다. lambdalink : https://wikidocs.net/24#lambda lambda함수는 쉽게 말하면 함수와 동일한 역할을 한다. 12345def 프린트입니다(a): return print(a)s = '함수를 사용하는 겁니다.'프린트입니다(s) # 함수를 사용하는 겁니다. 출력 123test = lambda a: print(a)s = 'lambda를 사용하는 겁니다.'test(s) # lambda를 사용하는 겁니다. 이와 같이 구현이 가능하다.주로 lambda는 함수를 구현할 정도로 복잡하지 않거나 함수를 사용할 수 없는 곳에 주로 쓰인다.","link":"/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2845%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 2914번 문제","text":"백준 2914번 문제저작권Link : https://www.acmicpc.net/problem/2914 12a, b = map(int, input().split())print(a * (b-1) + 1) b는 반올림이 되었다고 하니 -1를 해주고, a와 곱해집니다.그 후 +1를 하는데 그 이유는 잘 모르겠다.예제 출력을 보고 +1를 해줬는데 그게 정답이였다. 이 이분은 알아보고 수정하겠다.","link":"/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2914%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 3003번 문제","text":"백준 3003번 문제킹, 퀸, 룩, 비숍, 나이트, 폰Link : https://www.acmicpc.net/problem/3003 1234a = [1, 1, 2, 2, 2, 8]b = list(map(int, input().split()))print( *[a[i]-b[i] for i in range(6)] ) 2475번 문제 풀이를 유용했으나 좀 부족하다.그래서 python스럽게 변경하겠다. 1print( *[ int(j) - int(i) for i, j in zip(input().split(),&quot;112228&quot;) ] ) 문자열 자료형Link : https://wikidocs.net/13 왜 for문에 문자열을 넣었는지 이해가 안된다면, 점프 투 파이썬을 참고하면 된다.읽어보면 파이썬이 문자열에서 지원하는 기능을 보면 리스트와 별 차이가 없다는 것을 알 수 있다. 1[print(i) for i in '112228'] zipLink : https://wikidocs.net/32#zip 12a = zip([1, 2, 3], [4, 5, 6])print(*a) # 출력 : (1, 4) (2, 5) (3, 6) 이와 같이 zip은 동일한 개수로 이루어진 자료형을 묶어 주는 함수이다.이것을 이용하여 문제 풀이에선 체스 말의 개수와 사용자 입력 값을 하나씩 묶어서 변수에 넣어 줄 수 있었다. 123456789for i, j in zip(input().split(), '112228'): print('체스말 : ', i, '사용자 입력 : ', j)# 체스말 : 0 사용자 입력 : 1# 체스말 : 1 사용자 입력 : 1# 체스말 : 2 사용자 입력 : 2# 체스말 : 2 사용자 입력 : 2# 체스말 : 2 사용자 입력 : 2# 체스말 : 7 사용자 입력 : 8","link":"/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3003%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 3046번 문제","text":"백준 3046번 문제R2Link : https://www.acmicpc.net/problem/3046 12a, b = map(int, input().split())print(2*b - a) 간단하게 문제 풀이를 했으나, 역시 좀 아쉽다.좀 더 python스럽게 변경하였다. 1print(-eval(input().replace(&quot; &quot;,&quot;-2*&quot;))) replaceLink : https://wikidocs.net/13#replace 12s = 'Hi! _님'print(s.replace('_', 'LRTK')) # 출력 : Hi! LRTK님 이와 같이 특정 단어를 치환해주는 것이 replace함수이다.위 문제 풀이에선 입력된 ‘11 15’을 ‘11-2*15’로 변환하여 eval함수를 사용하여 계산하였다. eval함수는 정리한 부분은 백준 브론즈5 1000번 문제에서 다루었으니 궁금하면 찾아서 보면 된다.","link":"/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3046%EB%B2%88-%EB%AC%B8%EC%A0%9C/"},{"title":"백준 브론즈5 - 5337번 문제","text":"백준 5337번 문제웹컴Link : https://www.acmicpc.net/problem/5337 1print('. . .\\n| | _ | _. _ ._ _ _\\n|/\\|(/.|(_.(_)[ | )(/.') 이 문제는 파이썬을 처음 접한 분에게 파이썬의 print 주의점을 알려주기 위한 문제로 파악이 된다. 123# \\nsi 출략print('\\nsi') # 출력 : siprint('\\\\nsi') # 출력 : \\nsi 파이썬에서는 \\를 출력하기 위해 \\\\로 변경해줘야 한다.이러한 이유는 위의 코드처럼 ‘\\n’과 같은 특수 문자와 구별하려고 이러한 방법을 사용한다.","link":"/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-5337%EB%B2%88-%EB%AC%B8%EC%A0%9C/"}],"tags":[{"name":"BeeBox","slug":"BeeBox","link":"/tags/BeeBox/"},{"name":"Beebox","slug":"Beebox","link":"/tags/Beebox/"},{"name":"backjoon","slug":"backjoon","link":"/tags/backjoon/"},{"name":"백준","slug":"백준","link":"/tags/%EB%B0%B1%EC%A4%80/"},{"name":"백준 브론즈5","slug":"백준-브론즈5","link":"/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/"},{"name":"backjoon bronze5","slug":"backjoon-bronze5","link":"/tags/backjoon-bronze5/"},{"name":"백준 브론즈4","slug":"백준-브론즈4","link":"/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/"},{"name":"backjoon bronze4","slug":"backjoon-bronze4","link":"/tags/backjoon-bronze4/"}],"categories":[{"name":"Security","slug":"Security","link":"/categories/Security/"},{"name":"Web","slug":"Security/Web","link":"/categories/Security/Web/"},{"name":"PHP","slug":"Security/Web/PHP","link":"/categories/Security/Web/PHP/"},{"name":"알고리즘","slug":"알고리즘","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"BeeBox","slug":"Security/Web/PHP/BeeBox","link":"/categories/Security/Web/PHP/BeeBox/"},{"name":"백준","slug":"알고리즘/백준","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/"},{"name":"백준 브론즈5","slug":"알고리즘/백준/백준-브론즈5","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/"},{"name":"백준 브론즈4","slug":"알고리즘/백준/백준-브론즈4","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/"}]}