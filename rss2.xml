<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LRTK Blog</title>
    <link>https://lrtk-coder.github.io/</link>
    
    <atom:link href="https://lrtk-coder.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Coding, Security, IT News 등 정리한 블로그</description>
    <pubDate>Tue, 08 Dec 2020 16:44:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>iFrame Injection</title>
      <link>https://lrtk-coder.github.io/2020/12/09/iFrame-Injection-1/</link>
      <guid>https://lrtk-coder.github.io/2020/12/09/iFrame-Injection-1/</guid>
      <pubDate>Tue, 08 Dec 2020 16:43:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;&lt;code&gt;bWAPP/iframei.php?ParamUrl=robots.txt&amp;amp;ParamWidth=250&amp;amp</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><code>bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250</code><br><img src="./img/post_img/iFrame_Injection/1.png"></p><p>Url를 보면 robots.txt을 iFrame에 넣어서 출력한다.<br><br>ParamUrl을 robots.txt말고 다른 링크을 넣으면 출력이 되는지 확인하였다.</p><p><code>bWAPP/iframei.php?ParamUrl=index.php&amp;ParamWidth=250&amp;ParamHeight=250</code><br><img src="./img/post_img/iFrame_Injection/3.png"></p><p>출력이 되는 모습을 볼 수 있다.<br><br>여기서는 아무 악성 행위가 없는 사이트를 넣어지만, 만약 Xss가 들어있는 사이트를 넣으면 공격을 시도 할 수도 있다.</p><p>소스 코드를 확인하면, 바로 url를 출력하는 것을 확인 할 수 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_check</span>(<span class="params">$data</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>물론 안되겠지만, Low처럼 index.php를 불려오도록 하겠다.<br><br><code>bWAPP/iframei.php?ParamUrl=index.php&amp;ParamWidth=250&amp;ParamHeight=250</code><br><img src="./img/post_img/iFrame_Injection/1.png"></p><p>역시 보완이 되었는지 index.php가 출력이 안된 것을 확인할 수 있다.<br><br>Url의 파라미터를 확인해보니, iframe의 옵션으로 확인 할 수 있다.<br></p><p>이것들을 이용한다면, Xss나 iFrame Injection이 가능할 것 같다.<br><br>이를 위해, 개발자 도구를 이용하여 해당 파라미터가 어떻게 넣어지는지를 확인하였다.<br><br><br><br></p><p>Url의 파라미터에 아무 값을 안 넣고 소스 코드를 확인하였을 때의 모습이다.<br><br><code>bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;robots.txt&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>가장 마지막 파라미터에 test를 입력하여 소스 코드를 확인하였다.<br><br><code>bWAPP/iframei.php?ParamUrl=test&amp;ParamWidth=test1&amp;ParamHeight=test2</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;robots.txt&quot;</span> <span class="attr">height</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src는 robots.txt가 고정으로 확인되었다. 아마 다른 링크를 넣는 것을 방지하기 위함으로 추측이 된다.<br><br>하지만, 다른 파라미터는 값을 넣을 수 있다. 이를 이용하여 iFrame Injection하겠다.<br></p><p>ParamWidth에 <code>&quot;&gt;&lt;/iframe&gt;&lt;iframe src=&#39;index.php&#39; height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt;</code>을 추가하여 Injection을 시도하겠다.<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;robots.txt&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>전혀 변경된 것이 없다. 생각을 하면, <code>&lt;, &gt;, /</code>을 지웠다면, 지워진 나머지 문자열은 남아있어야 하는데 전혀 볼 수가 없다.<br><br>그래서 ParamWidth와 ParamHeight에 <code>&lt;/test&gt;</code>을 넣어서 확인해봤다.</p><p><code>bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&quot;&lt;/test&gt;&amp;ParamHeight=250&quot;&lt;/test&gt;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;0&quot; src=&quot;robots.txt&quot; height=&quot;250\&quot; &lt;=&quot;&quot; test=&quot;&quot;&gt;&quot; width=&quot;250\&quot;&lt;/test&gt;&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>뭔가 이상하게 되었다. 하지만, ParamWidth에 넣었을 때와 다르게 소스코드에 넣어졌기 때문에 다시 한번 ParamWidth에 넣었던 <code>&quot;&gt;&lt;/iframe&gt;&lt;iframe src=&#39;index.php&#39; height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt;</code>을 넣어서 시도하였다.</p><p><code>bWAPP/iframei.php?ParamUrl=robots.txt&amp;ParamWidth=250&amp;ParamHeight=250&quot;&gt;&lt;/iframe&gt;&lt;iframe src=&#39;index.php&#39; height=&quot;250&quot; width=&quot;250&quot;&gt;&lt;/iframe&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;robots.txt&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250\&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;\&#x27;index.php\&#x27;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;\<span class="symbol">&amp;quot;</span>250\<span class="symbol">&amp;quot;</span>&quot;</span> <span class="attr">width</span>=<span class="string">&quot;\<span class="symbol">&amp;quot;</span>250\<span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="./img/post_img/iFrame_Injection/7.png"></p><p>iframe Injection이 성공한 것을 확인할 수 있다.</p><p>이제 어떻게 iframe Injection을 방어했는지 소스 코드를 확인하겠다.</p><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xss_check_4</span>(<span class="params">$data</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">// addslashes - returns a string with backslashes before characters that need to be quoted in database queries etc.</span></span><br><span class="line">    <span class="comment">// These characters are single quote (&#x27;), double quote (&quot;), backslash (\) and NUL (the NULL byte).</span></span><br><span class="line">    <span class="comment">// Do NOT use this for XSS or HTML validations!!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> addslashes($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addslashes 함수를 사용하여 유효성 검사를 하였다.<br></p><h4 id="addslashes-함수"><a href="#addslashes-함수" class="headerlink" title="addslashes 함수"></a>addslashes 함수</h4><p>Link : <a href="http://www.w3big.com/ko/php/func-string-addslashes.html">http://www.w3big.com/ko/php/func-string-addslashes.html</a></p><p>addslashes 함수는 데이터베이스에 특수 문자를 넣을 경우 예상치 못한 오류를 발생하는 것을 치환하여 방지하는 함수이다.</p><p>[ 치환되는 문자 ]</p><ul><li>‘</li><li>“</li><li>\</li><li>NULL</li></ul><p>이 문자들은 출력이 될 때 앞에 <code>\</code>이 붙는다.<br></p><p>소스 코드의 주석을 보면 Xss과 HTML의 유효성 검사로는 쓰지말라는 주의가 적혀져 있다.</p><br><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xss_check_3</span>(<span class="params">$data, $encoding = <span class="string">&quot;UTF-8&quot;</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// htmlspecialchars - converts special characters to HTML entities    </span></span><br><span class="line">    <span class="comment">// &#x27;&amp;&#x27; (ampersand) becomes &#x27;&amp;amp;&#x27; </span></span><br><span class="line">    <span class="comment">// &#x27;&quot;&#x27; (double quote) becomes &#x27;&amp;quot;&#x27; when ENT_NOQUOTES is not set</span></span><br><span class="line">    <span class="comment">// &quot;&#x27;&quot; (single quote) becomes &#x27;&amp;#039;&#x27; (or &amp;apos;) only when ENT_QUOTES is set</span></span><br><span class="line">    <span class="comment">// &#x27;&lt;&#x27; (less than) becomes &#x27;&amp;lt;&#x27;</span></span><br><span class="line">    <span class="comment">// &#x27;&gt;&#x27; (greater than) becomes &#x27;&amp;gt;&#x27;  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> htmlspecialchars($data, ENT_QUOTES, $encoding);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML Injection의 High Level처럼 htmlspecialchars 함수를 사용하여 유효성 검사를 하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/09/iFrame-Injection-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 - 1008번 문제</title>
      <link>https://lrtk-coder.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-1008%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-1008%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Tue, 08 Dec 2020 14:24:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-1008번-문제&quot;&gt;&lt;a href=&quot;#백준-1008번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 1008번 문제&quot;&gt;&lt;/a&gt;백준 1008번 문제&lt;/h2&gt;&lt;h3 id=&quot;A-B&quot;&gt;&lt;a href=&quot;#A-B&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-1008번-문제"><a href="#백준-1008번-문제" class="headerlink" title="백준 1008번 문제"></a>백준 1008번 문제</h2><h3 id="A-B"><a href="#A-B" class="headerlink" title="A / B"></a>A / B</h3><h4 id="두-정수-A와-B를-입력받은-다음-A-B를-출력하는-프로그램을-작성하시오"><a href="#두-정수-A와-B를-입력받은-다음-A-B를-출력하는-프로그램을-작성하시오" class="headerlink" title="두 정수 A와 B를 입력받은 다음, A/B를 출력하는 프로그램을 작성하시오."></a>두 정수 A와 B를 입력받은 다음, A/B를 출력하는 프로그램을 작성하시오.</h4><p>Link : <a href="https://www.acmicpc.net/problem/1008">https://www.acmicpc.net/problem/1008</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">eval</span>(<span class="built_in">input</span>().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>eval을 이용하여 문제 풀이를 하였다.<br><br>eval이 무엇인지 궁금하신 분들은 <code>백준 브론즈5 - 1000번 문제</code>에서 설명하였다.<br><br>Link : lrtk-coder.github.io/2020/11/07/백준-브론즈5-1001번-문제/</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze4/">backjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-1008%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTML Injection - Stored(Blog)</title>
      <link>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Stored-Blog/</link>
      <guid>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Stored-Blog/</guid>
      <pubDate>Sun, 06 Dec 2020 19:29:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;일단 HTML 태그가 실행되는지 확인을 하겠다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post_img/HTML</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>일단 HTML 태그가 실행되는지 확인을 하겠다.<br></p><p><img src="/img/post_img/HTML_Injection_Stored_Blog/1.png"><br><img src="/img/post_img/HTML_Injection_Stored_Blog/2.png"></p><p>HTML 태그가 실행이 되는거 보니, 입력에 대한 검증이 없는 것 같다.<br></p><p><img src="/img/post_img/HTML_Injection_Stored_Blog/3.png"><br><img src="/img/post_img/HTML_Injection_Stored_Blog/4.png"></p><p>자바스크립트가 실행이 되었으며, 입력된 스크립트는 저장이 되어 페이자가 실행될 때 마다 Cookie 값을 출력한다.</p><p><img src="/img/post_img/HTML_Injection_Stored_Blog/5.png"><br><img src="/img/post_img/HTML_Injection_Stored_Blog/6.png"></p><p>이상하게 코드가 전혀 다른 기능인 <code>sqli_check_3</code>함수를 실행시키고 있다.<br><br>하지만 기능은 <code>xss_check_1</code>이 실행되는 거로 판단이 된다.</p><p><code>Medium</code>, <code>High</code>도 <code>HTML Injection_Reflected(GET)</code>과 같이 작동하는 것로 추측된다.</p><p>해당 풀이도 같으니, 더 작성하지는 않겠다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Stored-Blog/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTML Injection - Reflected(URL)</title>
      <link>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-URL/</link>
      <guid>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-URL/</guid>
      <pubDate>Sun, 06 Dec 2020 18:03:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;들어가보니 딸랑 이거 뿐이다.&lt;br&gt;&lt;br&gt;문제의 제목을 보니 URL이니깐 URL에 HTML 태그를 넣어주면 반영해주는</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>들어가보니 딸랑 이거 뿐이다.<br><br>문제의 제목을 보니 URL이니깐 URL에 HTML 태그를 넣어주면 반영해주는 것 같다.</p><p><img src="/img/post_img/HTML_Injection_Reflected_URL/1.png"></p><p>Burp Suite를 사용하여 URL에 HTML 태그를 넣어줬다.</p><p><code>?&lt;h1&gt;test&lt;/h1&gt;</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/bWAPP/htmli_current_url.php?&lt;h1&gt;test&lt;/h1&gt;</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.219.111</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=a10521c7e9d86bd7482f26f136d6cbe2; security_level=0</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p><img src="/img/post_img/HTML_Injection_Reflected_URL/2.png"></p><p>여기서 직접 Url창에 입력하지 않은 이유는 Url창에 입력하여 서버에 요청을 하면 브라우저에서 특수문자를 Url Encoding을 하여 요청을 보내기 때문이다.<br><br>하지만 <code>HTML Injection - Reflected(GET)</code>에서는 됬는데 왜 여기서는 안되는 이유는 이 문제의 php 기능 중에 Url Decoding을 하지 않기 때문이다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $url = &quot;http://&quot; . $_SERVER[&quot;HTTP_HOST&quot;] . urldecode($_SERVER[&quot;REQUEST_URI&quot;]);</span></span><br><span class="line">$url = <span class="string">&quot;http://&quot;</span> . $_SERVER[<span class="string">&quot;HTTP_HOST&quot;</span>] . $_SERVER[<span class="string">&quot;REQUEST_URI&quot;</span>];</span><br></pre></td></tr></table></figure><p>Burp Suite을 사용하면 문자열 그대로 요청이 되기 때문에 Burp Suite를 사용한 것이다.</p><br><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>이 문제는 취약점이 실행되지 않는다.<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = <span class="string">&quot;&lt;script&gt;document.write(document.URL)&lt;/script&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>Medium Level에서는 URL를 <code>document.write</code>을 이용하여 페이지에 출력을 한다.<br><br>문제는 자바스크립트로 실행되기 때문에 마지막에 실행된다는 점을 이용한 취약점이다. (브라우저에서 자바스크립트 소스코드를 마지막에 실행시킨다.)</p><p>취약점의 이름은 DOM Xss라고 한다.<br><br>하지만 지금은 모든 브라우저에서 패치를 했는지, Iternet Expoler에서도 실행이 안된다.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/bWAPP/htmli_current_url.php#&lt;h1&gt;test&lt;/h1&gt;</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.219.111</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=a10521c7e9d86bd7482f26f136d6cbe2; security_level=1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p>URL 뒤에 <code>#</code>은 <code>fragment</code>이라고 한다.<br><br>fragment은 브라우저 내부에서 사용되는 값이다.</p><br><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = <span class="string">&quot;http://&quot;</span> . $_SERVER[<span class="string">&quot;HTTP_HOST&quot;</span>] . xss_check_3($_SERVER[<span class="string">&quot;REQUEST_URI&quot;</span>]);</span><br></pre></td></tr></table></figure><p><code>HTML Injection - Reflected(GET)</code>의 High Level에서 봤던 xss_check_3을 사용하여 검증했다.<br><br>취약점은 못찾았다.</p><br><h2 id="DOM-Xss이란"><a href="#DOM-Xss이란" class="headerlink" title="DOM Xss이란?"></a>DOM Xss이란?</h2><p>정확한 명칭은 DOM Based Xss이라고 한다.(type-0 Xss이라고도 불리기도 함.)<br><br>DOM Xss은 브라우저에서 DOM 렌더링에서 실행되는 Xss공격이다.<br></p><p>DOM에 대한 지식이 필요함으로 밑에 적은 블로그의 글을 읽고 이해하시면 된다.</p><p>[참고 사이트]</p><ol><li>WIT블로그 : <a href="https://wit.nts-corp.com/2019/02/14/5522">https://wit.nts-corp.com/2019/02/14/5522</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-URL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTML Injection - Reflected(GET &amp; POST)</title>
      <link>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-GET/</link>
      <guid>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-GET/</guid>
      <pubDate>Sun, 06 Dec 2020 15:20:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Get문제와 Post문제는 동일한 방법으로 진행됨으로 Get문제 풀이만 하겠다.&lt;/p&gt;
&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;문제 제목이 HTML 인젝</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Get문제와 Post문제는 동일한 방법으로 진행됨으로 Get문제 풀이만 하겠다.</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>문제 제목이 HTML 인젝션이니 확인을 위해 First Name에 HTML 태그를 입력하겠다.</p><p><code>&lt;h1&gt;test&lt;/h1&gt;</code><br><img src="/img/post_img/HTML_Injection_Reflected_GET/1.png"></p><p>입력하니 HTML 태그가 그대로 적용이 되어있다.<br><img src="/img/post_img/HTML_Injection_Reflected_GET/2.png"></p><p>HTML 태그가 적용이 된다는 것은 자바스크립트도 적용이 된다는 뜻으로 이어갈 수 있다.</p><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code><br><img src="/img/post_img/HTML_Injection_Reflected_GET/3.png"><br><img src="/img/post_img/HTML_Injection_Reflected_GET/4.png"></p><p>자바스크립트로 Cookie 값을 출력하였다.<br><br>이런식으로 신뢰하지 못하는 사용자가 입력을 할 수 있는 입력은 검증이 필요하다.</p><br><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>문제의 난이도가 올라갔으니 입력 값에 대한 검증이 있을 것이다.<br><br>그래도 일단 확인을 위해 Low Level처럼 HTML 태그를 입력하겠다.</p><p><code>&lt;h1&gt;test&lt;/h1&gt;</code><br><img src="/img/post_img/HTML_Injection_Reflected_GET/5.png"><br><img src="/img/post_img/HTML_Injection_Reflected_GET/6.png"></p><p>HTML 태그가 적용이 되지 않고 그대로 출력된 것을 확인 할 수 있다.</p><p>php 소스코드를 확인을 안했다는 하에 추측상으로 <code>&lt;, &gt;, /</code>이 치환되었다고 생각할 수 있다.<br><br>치환을 우회할 수 있는 방법을 검색하였다.</p><p>검색 결과 <code>Double Url Encoding</code>을 통해 우회할 수 있다는 정보를 얻을 수 있었다.<br>이를 이용하기 위해서 <code>&lt;, &gt;, /</code>을 Url 인코딩하여 입력하겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>()</span><br><span class="line">parameter = &#123; <span class="string">&#x27;substitution&#x27;</span> : string &#125;</span><br><span class="line">print( parse.urlencode(parameter, encoding=<span class="string">&#x27;UTF-8&#x27;</span>, doseq=<span class="literal">True</span>) )</span><br></pre></td></tr></table></figure><p>Online Url Encoding : <a href="https://www.convertstring.com/ko/EncodeDecode/UrlEncode">https://www.convertstring.com/ko/EncodeDecode/UrlEncode</a></p><p>파이썬 코드와 온라인 Url인코딩을 이용하여 <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>을 Double Url Encoing하였다.</p><p><code>%253cscript%253ealert(document.cookie)%253c%252fscript%253e</code><br><img src="/img/post_img/HTML_Injection_Reflected_GET/9.png"><br><img src="/img/post_img/HTML_Injection_Reflected_GET/10.png"></p><p><strong>사실 이렇게 안해도 form에 Url Encoding만 넣어줘도 자동으로 특수문자가 Url Coding이 되기 때문에 굳이 Url에 Double Url Encoding을 직접 입력하지 않고, form에 Url 인코딩만 넣어도 된다.</strong></p><p>Xss를 성공했으니, 어떻게 <code>&lt;, &gt;, /</code>를 치환했는지 확인하겠다.</p><p><code>functions_external.php</code>의 <code>xss_check_1</code>함수를 확인하였다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xss_check_1</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Converts only &quot;&lt;&quot; and &quot;&gt;&quot; to HTLM entities    </span></span><br><span class="line">    $input = str_replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>, $data);</span><br><span class="line">    $input = str_replace(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>, $input);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Failure is an option</span></span><br><span class="line">    <span class="comment">// Bypasses double encoding attacks   </span></span><br><span class="line">    <span class="comment">// &lt;script&gt;alert(0)&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">// %3Cscript%3Ealert%280%29%3C%2Fscript%3E</span></span><br><span class="line">    <span class="comment">// %253Cscript%253Ealert%25280%2529%253C%252Fscript%253E</span></span><br><span class="line">    $input = urldecode($input);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>확인해보니, <code>&lt;, &gt;</code>를 <code>이스케이핑</code>으로 php의 str_replace을 사용하여 치환하였다.<br><br>하지만 Url 인코딩으로 서버에서는 <code>%253c</code>으로 입력받기 때문에 치환을 우회할 수 있었다.</p><br><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>High 단계는 거의 우회하기 힘든 단계이다.<br><br>소스코드를 살펴보도록 하겠다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xss_check_2</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// htmlentities - converts all applicable characters to HTML entities</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> htmlentities($data, ENT_QUOTES);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>htmlentities()</code>을 이용하여 xss를 검증하고 있다. <br></p><p><code>htmlentities()</code>은 밑과 같은 문자를 치환하는 함수이다.</p><ul><li><code>&amp;</code>는 <code>&amp;amp;</code>가 됩니다</li><li><code>&quot;</code>는 ENT_NOQUOTES를 설정하지 않았을 때 <code>&amp;quot;</code>가 됩니다.</li><li><code>&#39;</code>(홑따옴표)는 ENT_QUOTES가 설정되었을 때만 <code>&amp;#039;</code>가 됩니다.</li><li><code>&lt;</code>(미만)은 <code>&amp;lt;</code>가 됩니다.</li><li><code>&gt;</code>(이상)은 <code>&amp;gt;</code>가 됩니다.</li></ul><br><h2 id="Url-Encoding이란"><a href="#Url-Encoding이란" class="headerlink" title="Url Encoding이란?"></a>Url Encoding이란?</h2><p>정확히는 **퍼센트 인코딩(Percent Encoding)**이 맞지만, 흔히 Url에서 사용되어 Url 인코딩으로 불리고 있다.<br><br>퍼센트 인코딩은 Url에서 사용할 수 없는 문자(특수문자, 예약문자 등등)을 사용할 수 있도록 인코딩한다.</p><p>인코딩된 문자는 triplet(트리플렛, 세개가 한묶음)로 인코딩되며, 인코딩된 문자는 <code>%</code>로 시작한다. 그 뒤의 두 숫자는 16진수로 표현된다.</p><p>[참고 사이트]</p><ol><li>욕망의개발자(네이버 블로그) : <a href="https://m.blog.naver.com/PostView.nhn?blogId=j880825&amp;logNo=221231640609&amp;proxyReferer=https://www.google.com/">https://m.blog.naver.com/PostView.nhn?blogId=j880825&amp;logNo=221231640609&amp;proxyReferer=https:%2F%2Fwww.google.com%2F</a></li><li>퍼센트 인코딩(위키백과) : <a href="https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%84%BC%ED%8A%B8_%EC%9D%B8%EC%BD%94%EB%94%A9">https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%84%BC%ED%8A%B8_%EC%9D%B8%EC%BD%94%EB%94%A9</a></li></ol><br><h2 id="Double-Url-Encoding이란"><a href="#Double-Url-Encoding이란" class="headerlink" title="Double Url Encoding이란?"></a>Double Url Encoding이란?</h2><p>쉽게 말하면 Url 인코딩을 다시 한번 더 Url 인코딩을 한 것이다.</p><p>이 공격 기술은 흔히 공격 기술처럼 예상치 못한 동작을 유발하기 위해 2번 인코딩을 한 것이다.<br>가능한 이유는 웹서버가 다양한 인코딩 형식으로 클라이언트 요청을 수락하고 처리하기 때문이다.</p><br><h2 id="이스케이핑이란"><a href="#이스케이핑이란" class="headerlink" title="이스케이핑이란?"></a>이스케이핑이란?</h2><p>HTML 코드는 브라우저에 의해서 해석되는 약속된 문자들이다.<br><br>주로, 웹사이트에 HTML 태그 본 그래로 출력하려고 하는데 브라우저에서는 바로 HTML로 출력하게 된다. 이 떄문에 이스케이핑을 사용하여 HTML 태그를 출력하게 한다.</p><p>[참고 사이트]</p><ol><li>생활코딩 : <a href="https://opentutorials.org/course/1469/2824">https://opentutorials.org/course/1469/2824</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/07/HTML-Injection-Reflected-GET/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 5337번 문제</title>
      <link>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-5337%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-5337%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 11:36:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-5337번-문제&quot;&gt;&lt;a href=&quot;#백준-5337번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 5337번 문제&quot;&gt;&lt;/a&gt;백준 5337번 문제&lt;/h2&gt;&lt;h3 id=&quot;웹컴&quot;&gt;&lt;a href=&quot;#웹컴&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-5337번-문제"><a href="#백준-5337번-문제" class="headerlink" title="백준 5337번 문제"></a>백준 5337번 문제</h2><h3 id="웹컴"><a href="#웹컴" class="headerlink" title="웹컴"></a>웹컴</h3><p>Link : <a href="https://www.acmicpc.net/problem/5337">https://www.acmicpc.net/problem/5337</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;.  .   .\n|  | _ | _. _ ._ _  _\n|/\|(/.|(_.(_)[ | )(/.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이 문제는 파이썬을 처음 접한 분에게 파이썬의 print 주의점을 알려주기 위한 문제로 파악이 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \nsi 출략</span></span><br><span class="line">print(<span class="string">&#x27;\nsi&#x27;</span>)   <span class="comment"># 출력 : si</span></span><br><span class="line">print(<span class="string">&#x27;\\nsi&#x27;</span>)  <span class="comment"># 출력 : \nsi</span></span><br></pre></td></tr></table></figure><p>파이썬에서는 \를 출력하기 위해 \\로 변경해줘야 한다.<br><br>이러한 이유는 위의 코드처럼 ‘\n’과 같은 특수 문자와 구별하려고 이러한 방법을 사용한다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-5337%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 3046번 문제</title>
      <link>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3046%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3046%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 11:24:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-3046번-문제&quot;&gt;&lt;a href=&quot;#백준-3046번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 3046번 문제&quot;&gt;&lt;/a&gt;백준 3046번 문제&lt;/h2&gt;&lt;h3 id=&quot;R2&quot;&gt;&lt;a href=&quot;#R2&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-3046번-문제"><a href="#백준-3046번-문제" class="headerlink" title="백준 3046번 문제"></a>백준 3046번 문제</h2><h3 id="R2"><a href="#R2" class="headerlink" title="R2"></a>R2</h3><p>Link : <a href="https://www.acmicpc.net/problem/3046">https://www.acmicpc.net/problem/3046</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(<span class="number">2</span>*b - a)</span><br></pre></td></tr></table></figure><p>간단하게 문제 풀이를 했으나, 역시 좀 아쉽다.<br><br>좀 더 python스럽게 변경하였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(-<span class="built_in">eval</span>(<span class="built_in">input</span>().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;-2*&quot;</span>)))</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>Link : <a href="https://wikidocs.net/13#replace">https://wikidocs.net/13#replace</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hi! _님&#x27;</span></span><br><span class="line">print(s.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;LRTK&#x27;</span>))<span class="comment"># 출력 : Hi! LRTK님</span></span><br></pre></td></tr></table></figure><p>이와 같이 특정 단어를 치환해주는 것이 replace함수이다.<br><br>위 문제 풀이에선 입력된 ‘11 15’을 ‘11-2*15’로 변환하여 eval함수를 사용하여 계산하였다.<br></p><p>eval함수는 정리한 부분은 백준 브론즈5 1000번 문제에서 다루었으니 궁금하면 찾아서 보면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3046%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 3003번 문제</title>
      <link>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3003%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3003%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 11:15:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-3003번-문제&quot;&gt;&lt;a href=&quot;#백준-3003번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 3003번 문제&quot;&gt;&lt;/a&gt;백준 3003번 문제&lt;/h2&gt;&lt;h3 id=&quot;킹-퀸-룩-비숍-나이트-폰&quot;&gt;&lt;a href=&quot;#킹-퀸</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-3003번-문제"><a href="#백준-3003번-문제" class="headerlink" title="백준 3003번 문제"></a>백준 3003번 문제</h2><h3 id="킹-퀸-룩-비숍-나이트-폰"><a href="#킹-퀸-룩-비숍-나이트-폰" class="headerlink" title="킹, 퀸, 룩, 비숍, 나이트, 폰"></a>킹, 퀸, 룩, 비숍, 나이트, 폰</h3><p>Link : <a href="https://www.acmicpc.net/problem/3003">https://www.acmicpc.net/problem/3003</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">print( *[a[i]-b[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)] )</span><br></pre></td></tr></table></figure><p>2475번 문제 풀이를 유용했으나 좀 부족하다.<br><br>그래서 python스럽게 변경하겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print( *[ <span class="built_in">int</span>(j) - <span class="built_in">int</span>(i) <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">input</span>().split(),<span class="string">&quot;112228&quot;</span>) ] )</span><br></pre></td></tr></table></figure><h3 id="문자열-자료형"><a href="#문자열-자료형" class="headerlink" title="문자열 자료형"></a>문자열 자료형</h3><p>Link : <a href="https://wikidocs.net/13">https://wikidocs.net/13</a></p><p>왜 for문에 문자열을 넣었는지 이해가 안된다면, 점프 투 파이썬을 참고하면 된다.<br><br>읽어보면 파이썬이 문자열에서 지원하는 기능을 보면 리스트와 별 차이가 없다는 것을 알 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[print(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;112228&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>Link : <a href="https://wikidocs.net/32#zip">https://wikidocs.net/32#zip</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">print(*a)<span class="comment"># 출력 : (1, 4) (2, 5) (3, 6)</span></span><br></pre></td></tr></table></figure><p>이와 같이 zip은 동일한 개수로 이루어진 자료형을 묶어 주는 함수이다.<br><br>이것을 이용하여 문제 풀이에선 체스 말의 개수와 사용자 입력 값을 하나씩 묶어서 변수에 넣어 줄 수 있었다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">input</span>().split(), <span class="string">&#x27;112228&#x27;</span>):</span><br><span class="line">    print(<span class="string">&#x27;체스말 : &#x27;</span>, i, <span class="string">&#x27;사용자 입력 : &#x27;</span>, j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 체스말 :  0 사용자 입력 :  1</span></span><br><span class="line"><span class="comment"># 체스말 :  1 사용자 입력 :  1</span></span><br><span class="line"><span class="comment"># 체스말 :  2 사용자 입력 :  2</span></span><br><span class="line"><span class="comment"># 체스말 :  2 사용자 입력 :  2</span></span><br><span class="line"><span class="comment"># 체스말 :  2 사용자 입력 :  2</span></span><br><span class="line"><span class="comment"># 체스말 :  7 사용자 입력 :  8</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-3003%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 2914번 문제</title>
      <link>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2914%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2914%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 11:12:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-2914번-문제&quot;&gt;&lt;a href=&quot;#백준-2914번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 2914번 문제&quot;&gt;&lt;/a&gt;백준 2914번 문제&lt;/h2&gt;&lt;h3 id=&quot;저작권&quot;&gt;&lt;a href=&quot;#저작권&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-2914번-문제"><a href="#백준-2914번-문제" class="headerlink" title="백준 2914번 문제"></a>백준 2914번 문제</h2><h3 id="저작권"><a href="#저작권" class="headerlink" title="저작권"></a>저작권</h3><p>Link : <a href="https://www.acmicpc.net/problem/2914">https://www.acmicpc.net/problem/2914</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(a * (b<span class="number">-1</span>) + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>b는 반올림이 되었다고 하니 -1를 해주고, a와 곱해집니다.<br><br>그 후 +1를 하는데 그 이유는 잘 모르겠다.<br><br>예제 출력을 보고 +1를 해줬는데 그게 정답이였다. 이 이분은 알아보고 수정하겠다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/12/05/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2914%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 2845번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2845%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2845%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Fri, 13 Nov 2020 18:27:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-2845번-문제&quot;&gt;&lt;a href=&quot;#백준-2845번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 2845번 문제&quot;&gt;&lt;/a&gt;백준 2845번 문제&lt;/h2&gt;&lt;h3 id=&quot;파티가-끝나고-난-뒤&quot;&gt;&lt;a href=&quot;#파티가-끝나</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-2845번-문제"><a href="#백준-2845번-문제" class="headerlink" title="백준 2845번 문제"></a>백준 2845번 문제</h2><h3 id="파티가-끝나고-난-뒤"><a href="#파티가-끝나고-난-뒤" class="headerlink" title="파티가 끝나고 난 뒤"></a>파티가 끝나고 난 뒤</h3><p>link : <a href="https://www.acmicpc.net/problem/2845">https://www.acmicpc.net/problem/2845</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [b <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">open</span>(<span class="number">0</span>))]</span><br><span class="line">c = a[<span class="number">0</span>]*a[<span class="number">1</span>]</span><br><span class="line">print(a[<span class="number">2</span>]-c, a[<span class="number">3</span>]-c, a[<span class="number">4</span>]-c, a[<span class="number">5</span>]-c, a[<span class="number">6</span>]-c)</span><br></pre></td></tr></table></figure><p>2338번 문제 풀이를 응용하여 풀이를 하였다.<br><br>하지만 python스러운 코드는 아니다. 좀 더 변경하겠다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="keyword">lambda</span> : <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">A,B = r()</span><br><span class="line"></span><br><span class="line">[print(x-A*B) <span class="keyword">for</span> x <span class="keyword">in</span> r()]</span><br></pre></td></tr></table></figure><p>lambda함수를 이용하여 python스럽게 코드를 수정하였다.<br></p><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>link : <a href="https://wikidocs.net/24#lambda">https://wikidocs.net/24#lambda</a></p><p>lambda함수는 쉽게 말하면 함수와 동일한 역할을 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 프린트입니다(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> print(a)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;함수를 사용하는 겁니다.&#x27;</span></span><br><span class="line">프린트입니다(s)<span class="comment"># 함수를 사용하는 겁니다. 출력</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="keyword">lambda</span> a: print(a)</span><br><span class="line">s = <span class="string">&#x27;lambda를 사용하는 겁니다.&#x27;</span></span><br><span class="line">test(s)  <span class="comment"># lambda를 사용하는 겁니다.</span></span><br></pre></td></tr></table></figure><p>이와 같이 구현이 가능하다.<br><br>주로 lambda는 <strong>함수를 구현할 정도로 복잡하지 않거나 함수를 사용할 수 없는 곳에 주로 쓰인다.</strong></p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2845%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 2557 &amp; 2558번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2557%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2557%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Fri, 13 Nov 2020 18:25:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-2557번-문제&quot;&gt;&lt;a href=&quot;#백준-2557번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 2557번 문제&quot;&gt;&lt;/a&gt;백준 2557번 문제&lt;/h2&gt;&lt;h3 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-2557번-문제"><a href="#백준-2557번-문제" class="headerlink" title="백준 2557번 문제"></a>백준 2557번 문제</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>link : <a href="https://www.acmicpc.net/problem/2557">https://www.acmicpc.net/problem/2557</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="백준-2558번-문제"><a href="#백준-2558번-문제" class="headerlink" title="백준 2558번 문제"></a>백준 2558번 문제</h2><h3 id="A-B-2"><a href="#A-B-2" class="headerlink" title="A+B - 2"></a>A+B - 2</h3><p>link : <a href="https://www.acmicpc.net/problem/2558">https://www.acmicpc.net/problem/2558</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>(a <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">open</span>(<span class="number">0</span>))))</span><br></pre></td></tr></table></figure><p>각각 코드는 2475번, 2338번 문제 코드를 활용하여 문제 풀이를 하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2557%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 2475번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/12/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2475%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/12/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2475%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Wed, 11 Nov 2020 17:03:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-2475번-문제&quot;&gt;&lt;a href=&quot;#백준-2475번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 2475번 문제&quot;&gt;&lt;/a&gt;백준 2475번 문제&lt;/h2&gt;&lt;h3 id=&quot;검증수&quot;&gt;&lt;a href=&quot;#검증수&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-2475번-문제"><a href="#백준-2475번-문제" class="headerlink" title="백준 2475번 문제"></a>백준 2475번 문제</h2><h3 id="검증수"><a href="#검증수" class="headerlink" title="검증수"></a>검증수</h3><p>link : <a href="https://www.acmicpc.net/problem/2475">https://www.acmicpc.net/problem/2475</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, e, f = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print((a**<span class="number">2</span> + b**<span class="number">2</span> + c**<span class="number">2</span> + e**<span class="number">2</span> + f**<span class="number">2</span>)%<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>**은 제곱근을 의미한다. a**2 =&gt; a^2를 의미<br></p><p>위 코드를 python스럽게 변경해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print( <span class="built_in">sum</span>( a**<span class="number">2</span> <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()) )%<span class="number">10</span> )</span><br></pre></td></tr></table></figure><p>보기 좋게 한 줄로 표현이 되었다.<br><br>근데 이상하게 print함수 안에 for문이 들어가 있다.<br><br>이 형식은 제너레이터 표현라고 한다.<br></p><h3 id="itertor"><a href="#itertor" class="headerlink" title="itertor"></a>itertor</h3><p>link : <a href="https://bluese05.tistory.com/55">https://bluese05.tistory.com/55</a></p><p>itertor - 제너레이터 - 제너레이터 표현 순으로 봐야 좀 더 이해가 쉽다.<br></p><p>itertor은 next 메소드로 데이터를 순차적으로 호출 가능한 object이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">type</span>(x), <span class="string">&#x27;\n&#x27;</span>)<span class="comment"># &lt;class &#x27;list&#x27;&gt; 출력</span></span><br><span class="line"></span><br><span class="line">y = <span class="built_in">iter</span>(x)</span><br><span class="line">print(<span class="built_in">type</span>(y), <span class="string">&#x27;\n&#x27;</span>)<span class="comment">#&lt;class &#x27;list_iterator&#x27;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    print(<span class="built_in">next</span>(y))<span class="comment"># 1 2 3 출력</span></span><br></pre></td></tr></table></figure><p>이와 같이 iter함수를 사용하여 iterator 형식으로 변환할 수 있다.<br><br>하지만 우리는 반복문을 쓸 때 next 메소드를 쓴 적이 없다.<br><br>이유는 파이썬 내부에서 임시로 list를 iterator로 자동 변환해주기 때문이다.</p><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>link : <a href="https://bluese05.tistory.com/56">https://bluese05.tistory.com/56</a></p><p>제너레이터는 iterator를 반환하는 함수이다.<br>제너레이터는 일반적인 함수와 비슷하게 보이지만, 차이점이 있다.<br><br><strong>yield</strong>라는 존재가 그 차이점이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i &gt; n:</span><br><span class="line">        <span class="keyword">yield</span> print(i, <span class="string">&#x27;no!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    a = <span class="number">10000</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">print(*ex(<span class="number">-2</span>), <span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="comment"># 0 no!!</span></span><br><span class="line"><span class="comment"># None 출력</span></span><br><span class="line"></span><br><span class="line">print(*ex(<span class="number">3</span>), <span class="string">&#x27;\n&#x27;</span>)<span class="comment"># 0 1 2 출력 </span></span><br><span class="line">print(i, <span class="string">&#x27;\n&#x27;</span>)<span class="comment"># 3 출력</span></span><br><span class="line"></span><br><span class="line">print(test())<span class="comment"># 10000 출력</span></span><br><span class="line">print(a)<span class="comment"># 0 출력</span></span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>함수가 끝나면 함수 안의 변수들은 메모리 상에서 clear된다.<br><br>하지만 yield를 사용한 경우는 다른 형식으로 흘려간다.<br><br>함수에서 yield를 만나면, 해당 함수는 그 상태로 정지가 되어 next 메소드를 호출한 쪽으로 yield를 전달하게 된다.<br><br>이 후 해당 함수는 종료되는 것이 아니라, 함수 내부 데이터가 메모리에 그대로 유지하고 실행된다. </p><p>위의 예제 코드에서 ex함수가 종료되어도 ex함수의 i 변수의 데이터가 메모리에 남아 있는 것을 알 수 있다.</p><h3 id="generator-expreession"><a href="#generator-expreession" class="headerlink" title="generator expreession"></a>generator expreession</h3><p>제너레이터 표현은 제너레이터를 쉽게 사용할 수 있도록 해준다.<br><br>list comprehension과 비슷하지만, [] 대신 ()를 사용하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;--list comprehension--&#x27;</span>)</span><br><span class="line">[print(i) <span class="keyword">for</span> i <span class="keyword">in</span> s]</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># --list comprehension--</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5 출력</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;--generator expreession--&#x27;</span>)</span><br><span class="line">(print(i) <span class="keyword">for</span> i <span class="keyword">in</span> s)</span><br><span class="line"><span class="comment"># --generator expreession--</span></span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x113b3a890&gt; 출력</span></span><br></pre></td></tr></table></figure><p>복잡한데 왜 사용할까?<br><br>사용하는 이유는 성능 때문이다. 일반적인 for문을 돌리는 것보다 generator expreession과 list comprehension형식으로 돌리는게 속도와 메모리가 성능이 좋다.</p><p>다른 방식들도 있는데 이는 밑의 링크를 참고하면 된다.<br><br>link : <a href="https://mingrammer.com/introduce-comprehension-of-python/">https://mingrammer.com/introduce-comprehension-of-python/</a></p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/12/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2475%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 2338번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2338%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2338%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Mon, 09 Nov 2020 17:29:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-2338번-문제&quot;&gt;&lt;a href=&quot;#백준-2338번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 2338번 문제&quot;&gt;&lt;/a&gt;백준 2338번 문제&lt;/h2&gt;&lt;h3 id=&quot;긴자리-계산&quot;&gt;&lt;a href=&quot;#긴자리-계산&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-2338번-문제"><a href="#백준-2338번-문제" class="headerlink" title="백준 2338번 문제"></a>백준 2338번 문제</h2><h3 id="긴자리-계산"><a href="#긴자리-계산" class="headerlink" title="긴자리 계산"></a>긴자리 계산</h3><p>link : <a href="https://www.acmicpc.net/problem/2338">https://www.acmicpc.net/problem/2338</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a+b&#125;</span>\n<span class="subst">&#123;a-b&#125;</span>\n<span class="subst">&#123;a*b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>1271번 문제풀이 방식으로 문제 풀이를 하였다.<br></p><p>이렇게 제출해도 정답으로 인정 받지만, 예제 입력을 보면 한 줄이 아닌 두 줄로 입력을 하고 있다. 이점을 걸리신 분들은 다음과 같은 방식으로 코드를 수정하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">open</span>(<span class="number">0</span>))</span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a+b&#125;</span>\n<span class="subst">&#123;a-b&#125;</span>\n<span class="subst">&#123;a*b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이 방식은 정해진 변수에 계속 입력을 받을 수 있고, stdout방식이 아닌 EOF방식으로 출력이 된다.<br><br>stdout방식과 EOF방식이 무엇일까?<br><br>두 개의 방식을 설명하기 앞서 선행되어야 하는 것이 입출력이 무엇인지를 알아야한다.<br></p><h3 id="입출력"><a href="#입출력" class="headerlink" title="입출력"></a>입출력</h3><p>쉽게 말해 프로그램에게 데이터를 주는 것이 입력이고, 데이터를 모니터로 보여주게 하는 것이 출력이다.<br></p><h3 id="스트림"><a href="#스트림" class="headerlink" title="스트림"></a>스트림</h3><p>우리가 데이터를 입력할 때 주로 무엇을 사용할까요? 바로 키보드와 마우스입니다.<br><br>키보드와 마우스를 사용하여 프로그램에게 데이터를 전달해야하는데 전달해주는 것이 바로 **표준 입력 스트림(stdin)**입니다.</p><p>프로그램에서 모니터, 프린터로 전달하는 것은 **표준 출력 스트림(stdout)**이라고 합니다.</p><p>이 외에도 오류 출력용인 **표준 에러 스트림(stderr)**가 있습니다.</p><p>이것들은 input함수, print함수를 사용하면 생성이되고 입력과 출력이 끝나면 자동으로 종료가 됩니다.<br></p><h3 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h3><p>EOF(End Of File)은 더 이상 데이터가 없음을 의미합니다.<br><br>왜 open(0)은 EOF방식 출력이라고 제가 표현 했을까요? open(0)은 입력 받는 것이 무한 반복 하기 때문입니다.<br><br>그 때문에 프로그램에게 EOF을 알려 줘야 무한 입력이 끝나고, 값이 출력될 수 있기 때문에 EOF방식 출력이라고 표현했습니다.<br></p><p>– 출론 –<br><br>그럼 왜 open(0)이 무한 입력이 될까요?<br><br>open함수는 파일을 읽기 위해 주로 사용되는 함수입니다. 즉, 파일 입력 함수이죠.<br><br>open함수의 대표적인 인자값은 open(file, mode)입니다.<br><br>그런데 파일이 0이다? open함수 입장에서는 읽을 데이터가 없으니 직접 데이터를 입력하라고 입력창을 띄어주는 것 같습니다. 이에 대해서는 python의 open함수 코드를 열어봐서 분석할 예정입니다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-2338%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 1550번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1550%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1550%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Mon, 09 Nov 2020 17:26:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-1550번-문제&quot;&gt;&lt;a href=&quot;#백준-1550번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 1550번 문제&quot;&gt;&lt;/a&gt;백준 1550번 문제&lt;/h2&gt;&lt;h3 id=&quot;16진수&quot;&gt;&lt;a href=&quot;#16진수&quot; class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-1550번-문제"><a href="#백준-1550번-문제" class="headerlink" title="백준 1550번 문제"></a>백준 1550번 문제</h2><h3 id="16진수"><a href="#16진수" class="headerlink" title="16진수"></a>16진수</h3><p>link : <a href="https://www.acmicpc.net/problem/1550">https://www.acmicpc.net/problem/1550</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">int</span>(<span class="built_in">input</span>(), <span class="number">16</span>))</span><br></pre></td></tr></table></figure><p>int함수에 옵션을 주어서 간단하게 문제를 해결하였다.<br></p><p>int함수의 옵션은 밑의 주소에서 확인하면 된다.<br><br>link : <a href="https://wikidocs.net/32#int">https://wikidocs.net/32#int</a></p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1550%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 1271번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1271%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1271%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sun, 08 Nov 2020 17:54:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-1271번-문제&quot;&gt;&lt;a href=&quot;#백준-1271번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 1271번 문제&quot;&gt;&lt;/a&gt;백준 1271번 문제&lt;/h2&gt;&lt;h3 id=&quot;엄청난-부자2&quot;&gt;&lt;a href=&quot;#엄청난-부자2&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-1271번-문제"><a href="#백준-1271번-문제" class="headerlink" title="백준 1271번 문제"></a>백준 1271번 문제</h2><h3 id="엄청난-부자2"><a href="#엄청난-부자2" class="headerlink" title="엄청난 부자2"></a>엄청난 부자2</h3><p>link : <a href="https://www.acmicpc.net/problem/1271">https://www.acmicpc.net/problem/1271</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a//b&#125;</span>\n<span class="subst">&#123;a%b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>1001번 문제와 같은 방식으로 풀이를 했다.<br><br>다만 틀린 점은 print함수의 문자열 앞에 f가 있다는 점이다.<br><br>f의 뜻은 fomat이라는 뜻이다. 원래 이 기능은 생긴지 얼마 안되었다.<br><br>이 기능이 없기 전까지는 print(‘{0}\n{1}’.fomat(a//b, a%b))와 같이 fomat함수를 사용하였다.<br><br>하지만 가독성이 떨어져서 문자열 앞에 f를 표시하는 것으로 변경되었고, 문자열 안에 바로 변수를 선언하여서 가독성을 높였다.</p><p>이제 좀 더 python스럽게 변경해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*<span class="built_in">divmod</span>(*<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br></pre></td></tr></table></figure><p>특이한 것이 있다. 저 *은 무엇인가?? 곱하기인가?<br><br>아니다. *은 파이썬이 지원하는 많은 연산자 중 하나인 Asterisk이다.<br></p><h3 id="Asterisk"><a href="#Asterisk" class="headerlink" title="Asterisk"></a>Asterisk</h3><p>파이썬에서는 *는 곱셈 이상의 여러 의미를 갖는 연산이 가능케한다. 그 중 위의 코드는 컨테이너 타입의 데이터를 Unpacking할 때 쓰이는 Asterisk이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;None Asterlisk : &#x27;</span>, <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()), <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># None Asterlisk :  &lt;map object at 0x10e4f20a0&gt;  출력</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Asterlisk : &#x27;</span>, *<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()), <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Asterlisk :  100 10 출력</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="string">&#x27;None Asterlisk : &#x27;</span>, a, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># None Asterlisk :  [1, 2, 3, 4] </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Asterlisk : &#x27;</span>, *a, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Asterlisk :  1 2 3 4 </span></span><br></pre></td></tr></table></figure><p>예시 코드를 보니 아주 명확하게 구별이 가능했다.<br><br>혹시 더 알아보고 싶으면 아래의 링크로 알아보면 된다.<br><br>link : <a href="https://mingrammer.com/understanding-the-asterisk-of-python/">https://mingrammer.com/understanding-the-asterisk-of-python/</a></p><p>*은 해결했으니, divmod함수를 알아보자.<br></p><h3 id="divmod"><a href="#divmod" class="headerlink" title="divmod"></a>divmod</h3><p>link : <a href="https://wikidocs.net/32#divmod">https://wikidocs.net/32#divmod</a></p><p>divmod함수는 이름 뜻대로 두 개의 인자값을 나눈 몫과 나머지를 튜플 형태로 return 해주는 함수이다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">divmod</span>(<span class="number">7</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># (2, 1) 출력</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">divmod</span>(<span class="number">100</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># (10, 0) 출력</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1271%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 1001번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EB%93%9C5-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EB%93%9C5-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 07 Nov 2020 18:57:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-1001번-문제&quot;&gt;&lt;a href=&quot;#백준-1001번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 1001번 문제&quot;&gt;&lt;/a&gt;백준 1001번 문제&lt;/h2&gt;&lt;h3 id=&quot;A-B&quot;&gt;&lt;a href=&quot;#A-B&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-1001번-문제"><a href="#백준-1001번-문제" class="headerlink" title="백준 1001번 문제"></a>백준 1001번 문제</h2><h3 id="A-B"><a href="#A-B" class="headerlink" title="A-B"></a>A-B</h3><p>Link : <a href="https://www.acmicpc.net/problem/1001">https://www.acmicpc.net/problem/1001</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">int</span>(<span class="built_in">input</span>())-<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br></pre></td></tr></table></figure><p>1000번 문제처럼 데이터를 입력받아 정수형으로 변환하여 -를 해주었다.<br><br>하지만 결과는? <strong><em>런타임 에러</em></strong><br><br><strong>이유는 모르겠다… 혹시 아시는 분은 댓글 부탁드립니다…</strong><br></p><p>일단 입력값은 ‘3 2’이다. 이를 입력받아야히는데 어떻게 입력을 받아야할까?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">input</span>().split()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>split함수를 사용하면 하나의 input함수로 여러 변수에 값을 넣어줄 수 있다.<br></p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>Link : <a href="https://wikidocs.net/13#split">https://wikidocs.net/13#split</a></p><p>split함수는 문자열을 나누는 함수이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;a b c d&#x27;</span></span><br><span class="line">print(s.split())<span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] 출력</span></span><br></pre></td></tr></table></figure><p>list로 return되어지만, input에는 각 하나씩 입력되어 변수에 저장될 것이다.<br><br>이를 이용해서 문제를 해결해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">input</span>().split()</span><br><span class="line">print(<span class="built_in">int</span>(a)-<span class="built_in">int</span>(b))</span><br></pre></td></tr></table></figure><p>input은 문자열로 데이터를 넣어주기 때문에 값을 계산하기 위해서는 정수 변환이 필수이다.<br><br>하지만 입력받은 정수가 100개라면? 하나하나 int함수를 넣어서 계산해야하나?<br>답은 map함수에 있다.</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Link : <a href="https://wikidocs.net/32#map">https://wikidocs.net/32#map</a></p><p>map(f, iterable)로 함수(f)와 반복 가능한(iterable) 자료형을 입력받아 f에 iterable를 넣어서 f의 결과를 묶어서 돌려주는 함수이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EB%93%9C5-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈5 - 1000번 문제</title>
      <link>https://lrtk-coder.github.io/2020/11/07/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2020/11/07/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Fri, 06 Nov 2020 22:53:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;백준-1000번-문제&quot;&gt;&lt;a href=&quot;#백준-1000번-문제&quot; class=&quot;headerlink&quot; title=&quot;백준 1000번 문제&quot;&gt;&lt;/a&gt;백준 1000번 문제&lt;/h2&gt;&lt;h3 id=&quot;A-B&quot;&gt;&lt;a href=&quot;#A-B&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="백준-1000번-문제"><a href="#백준-1000번-문제" class="headerlink" title="백준 1000번 문제"></a>백준 1000번 문제</h2><h3 id="A-B"><a href="#A-B" class="headerlink" title="A+B"></a>A+B</h3><p>Link : <a href="https://www.acmicpc.net/problem/1000">https://www.acmicpc.net/problem/1000</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">int</span>(<span class="built_in">input</span>())+<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br></pre></td></tr></table></figure><p>간단하게 생각할 수 있는 코드이다.<br><br>input로 값을 입력받아 int 함수를 이용하여 문자에서 정수로 데이터타입을 변경하여 더하여 print 함수를 이용하여 출력하였다.<br></p><p>이 코드를 좀 더 python스럽게 만들어 보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">eval</span>(<span class="string">&#x27;+&#x27;</span>.join(<span class="built_in">input</span>())))</span><br></pre></td></tr></table></figure><p>eval, join 함수를 사용하여 python스럽게 아주 간단하게 변경되었다.<br><br>join과 eval에 대하여 알아보자.</p><h3 id="문자열-삽입-join"><a href="#문자열-삽입-join" class="headerlink" title="문자열 삽입(join)"></a>문자열 삽입(join)</h3><p>Link : <a href="https://wikidocs.net/13#join">https://wikidocs.net/13#join</a></p><p>문자열의 문자 사이에 문자를 삽입하는 함수이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;+&#x27;</span>.join(<span class="string">&#x27;1234&#x27;</span>))   <span class="comment"># 1+2+3+4 출력</span></span><br></pre></td></tr></table></figure><p>위와 같이 문자열인 1234의 문자 사이에 +를 삽입되었다.<br><br>python스럽게 고친 코드도 이를 이용하여 입력 받은 문자열에 +를 삽입하였다.<br><br>허나 이상한 부분이 있다. join은 문자열의 문자 사이에 문자를 넣은 함수이지 계산을 하는 함수는 아니다.<br><br>그럼 어떻게 계산을 할 수 있을지는 eval함수에 답이 있다.</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>Link : <a href="https://wikidocs.net/32#eval">https://wikidocs.net/32#eval</a></p><p>eval함수는 실행 가능한 문자열을 실행한 결과값을 돌려주는 마법의 함수이다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;&#x27;Hi&#x27; + &#x27;!!!&#x27;&quot;</span>)         <span class="comment"># &#x27;Hi&#x27; + &#x27;!!!&#x27; 출력</span></span><br><span class="line">print(<span class="built_in">eval</span>(<span class="string">&quot;&#x27;Hi&#x27; + &#x27;!!!&#x27;&quot;</span>))   <span class="comment"># Hi!!! 출력</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">eval</span>(<span class="string">&#x27;+&#x27;</span>.join(<span class="string">&#x27;1234&#x27;</span>))) <span class="comment"># 10 출력</span></span><br></pre></td></tr></table></figure><p>위와 같이 실행 가능한 문자를 실행해주는 함수이다.<br><br>자세한 예제를 보고 싶다면 programiz 사이트에서 참고하면 좋다.<br></p><p>Link : <a href="https://www.programiz.com/python-programming/methods/built-in/eval">https://www.programiz.com/python-programming/methods/built-in/eval</a></p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon/">backjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885/">백준 브론즈5</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze5/">backjoon bronze5</category>
      
      
      <comments>https://lrtk-coder.github.io/2020/11/07/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%885-1001%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
