<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LRTK Blog</title>
    <link>https://lrtk-coder.github.io/</link>
    
    <atom:link href="https://lrtk-coder.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Coding, Security, IT News 등 정리한 블로그</description>
    <pubDate>Sun, 14 Feb 2021 10:10:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>백준 브론즈4 16486번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16486%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16486%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sun, 14 Feb 2021 00:56:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;운동장-한-바퀴&quot;&gt;&lt;a href=&quot;#운동장-한-바퀴&quot; class=&quot;headerlink&quot; title=&quot;운동장 한 바퀴&quot;&gt;&lt;/a&gt;운동장 한 바퀴&lt;/h1&gt;&lt;p&gt;세연이네 학교 운동장은 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="운동장-한-바퀴"><a href="#운동장-한-바퀴" class="headerlink" title="운동장 한 바퀴"></a>운동장 한 바퀴</h1><p>세연이네 학교 운동장은 아래와 같다.</p><p><img src="/images/pasted-133.png"></p><p>위의 그림에서 영역 A와 B는 반원이며, 영역 C는 직사각형이다. 영역 C의 가로의 길이를 d1, 영역 A의 반지름의 길이 d2의 값이 주어지면 운동장의 한 바퀴 둘레를 알아내는 프로그램을 작성하시오. (단, 이 문제에서는 π (원주율)의 값을 3.141592라고 한다.)</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b &#x3D; map(int, open(0))</span><br><span class="line">print(a*2+b*2*3.141592)</span><br></pre></td></tr></table></figure><p>직사각형인 c의 밑변의 길이는 a로 나타났으니, 2*a를 하면 C의 길이가 나온다.</p><p>원의 길이는 2<em>π</em>반지름으로 구할 수 있다.<br><br>원의 반지름은 b로 입력되니, 2<em>π</em>b로 구하면 된다.</p><p>그러므로, 운동장의 길이는 2<em>a + 2</em>π*b로 구하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/14/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16486%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Linked List 구현</title>
      <link>https://lrtk-coder.github.io/2021/02/13/Data-Structure-Linked-List-%EA%B5%AC%ED%98%84/</link>
      <guid>https://lrtk-coder.github.io/2021/02/13/Data-Structure-Linked-List-%EA%B5%AC%ED%98%84/</guid>
      <pubDate>Sat, 13 Feb 2021 04:23:00 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Code&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight python"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Implementing a Linked List with list variables&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.linked_list = <span class="built_in">list</span>()</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_create</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        node = [value, <span class="literal">None</span>]</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_node_add</span>(<span class="params">self, *nodes</span>):</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.linked_list) == <span class="number">0</span>:</span><br><span class="line">                self.linked_list.append(node)</span><br><span class="line">                self.head = <span class="built_in">id</span>(self.linked_list[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            self.linked_list.append(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index, node <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.linked_list):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.linked_list)<span class="number">-1</span> == index:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">            node[<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_node_del</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        index = self.linked_list.index(node)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">del</span> self.linked_list[<span class="number">0</span>]</span><br><span class="line">            self.head = <span class="built_in">id</span>(self.linked_list[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> index == <span class="built_in">len</span>(self.linked_list)<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">del</span> self.linked_list[index]</span><br><span class="line">            self.linked_list[index<span class="number">-1</span>][<span class="number">1</span>] = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> self.linked_list[index]</span><br><span class="line">        self.linked_list[index<span class="number">-1</span>][<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_node_insert</span>(<span class="params">self, node, insert_index</span>):</span></span><br><span class="line">        self.linked_list.insert(insert_index, node)</span><br><span class="line">        index = self.linked_list.index(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.linked_list[index][<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> index == <span class="built_in">len</span>(self.linked_list)<span class="number">-1</span>:</span><br><span class="line">            self.linked_list[index<span class="number">-1</span>][<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index])</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line"></span><br><span class="line">        self.linked_list[index<span class="number">-1</span>][<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index])</span><br><span class="line">        self.linked_list[index][<span class="number">1</span>] = <span class="built_in">id</span>(self.linked_list[index+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    link = LinkedList()</span><br><span class="line"></span><br><span class="line">    node1 = link.node_create(<span class="number">1</span>)</span><br><span class="line">    node2 = link.node_create(<span class="number">2</span>)</span><br><span class="line">    node3 = link.node_create(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;연결 리스트 첫 생성&#x27;</span>)</span><br><span class="line">    link.list_node_add(node1, node2, node3)</span><br><span class="line">    print(link.linked_list)</span><br><span class="line">    print(<span class="built_in">id</span>(link.linked_list[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;연결 리스트 Node 삭제&#x27;</span>)    </span><br><span class="line">    link.list_node_del(node2)</span><br><span class="line">    print(link.linked_list)</span><br><span class="line">    print(<span class="built_in">id</span>(link.linked_list[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;연결 리스트 Node 삽입&#x27;</span>)</span><br><span class="line">    node4 = link.node_create(<span class="number">2.5</span>)</span><br><span class="line">    link.list_node_insert(node4, <span class="number">1</span>)</span><br><span class="line">    print(link.linked_list)</span><br><span class="line">    print(<span class="built_in">id</span>(link.linked_list[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">연결 리스트 첫 생성</span><br><span class="line">[[1, 140373362700416], [2, 140373416654784], [3, None]]</span><br><span class="line">140373362700416</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">연결 리스트 Node 삭제</span><br><span class="line">[[1, 140373416654784], [3, None]]</span><br><span class="line">140373416654784</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">연결 리스트 Node 삽입</span><br><span class="line">[[1, 140373416654592], [2.5, 140373416654784], [3, None]]</span><br><span class="line">140373416654784</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Linked-List/">Linked List</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/13/Data-Structure-Linked-List-%EA%B5%AC%ED%98%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 17388번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/13/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17388%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/13/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17388%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 13 Feb 2021 01:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;와글와글-숭고한&quot;&gt;&lt;a href=&quot;#와글와글-숭고한&quot; class=&quot;headerlink&quot; title=&quot;와글와글 숭고한&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/17388&quot;&gt;와글와글 숭고한&lt;/a&gt;&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="와글와글-숭고한"><a href="#와글와글-숭고한" class="headerlink" title="와글와글 숭고한"></a><a href="https://www.acmicpc.net/problem/17388">와글와글 숭고한</a></h1><p>숭고한 알고리즘 캠프가 다가오고 있고 방학이 되어서까지도 각 대학들의 협업은 계속되고 있다. 그럼에도 불구하고 운영진들과 강사진들이 각자의 일정 때문에 바빠 계획에 차질이 조금씩 생기고 있다. 숭고한 알고리즘 캠프의 대표인 창호는 효율적인 일처리를 위해 엄정한 평가를 내리기로 하였다.</p><p>창호는 숭고한 알고리즘 캠프의 구성원인 숭실대학교(Soongsil University), 고려대학교(Korea University), 한양대학교(Hanyang University)의 참여도를 수치화하였다. 창호가 보기에 세 대학교의 참여도의 합이 100 이상이면 일처리가 잘 되고 있기에 안심할 수 있지만, 100 미만이면 창호는 참여도가 가장 낮은 대학의 동아리에게 무언의 압박을 넣을 예정이다. 숭고한 알고리즘 캠프의 성공을 빌며 창호의 고민을 해결해주자.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">if</span> a+b+c &gt;= <span class="number">100</span>: print(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>: print([[<span class="string">&#x27;Soongsil&#x27;</span>, <span class="string">&#x27;Korea&#x27;</span>][a&gt;b],<span class="string">&#x27;Hanyang&#x27;</span>][<span class="built_in">min</span>(a, b) &gt; c])</span><br></pre></td></tr></table></figure><p>간단하게 bool을 이용한 인덱싱으로 문제풀이를 하였다.</p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [*<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())]</span><br><span class="line">print([[<span class="string">&#x27;Soongsil&#x27;</span>, <span class="string">&#x27;Korea&#x27;</span>, <span class="string">&#x27;Hanyang&#x27;</span>][a.index(<span class="built_in">min</span>(a))], <span class="string">&#x27;OK&#x27;</span>][<span class="built_in">sum</span>(a)&gt;<span class="number">99</span>])</span><br></pre></td></tr></table></figure><p>위 코드와 같이 bool을 이용한 인덱싱으로 문제풀이을 하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/13/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17388%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (JSON)</title>
      <link>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-JSON/</link>
      <guid>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-JSON/</guid>
      <pubDate>Sat, 13 Feb 2021 01:04:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제풀이&quot;&gt;&lt;a href=&quot;#문제풀이&quot; class=&quot;headerlink&quot; title=&quot;문제풀이&quot;&gt;&lt;/a&gt;문제풀이&lt;/h1&gt;&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Lo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-126.png"></p><p>우리의 마스터가 마블 영화를 엄청 좋아한다는 힌트가 써져있다.<br><br>저번 문제에서 계속 아이언맨이 있었으니, 아이언맨을 입력해 보았다.</p><p><img src="/images/pasted-127.png"></p><p>이번엔 이상한 값을 입력해 보았다.</p><p><img src="/images/pasted-128.png"></p><p>아직까진 어떻게 작동하는지 잘 모르겠다.<br><br>개발자 도구를 열어서 Json을 확인하였다.</p><p><img src="/images/pasted-129.png"></p><p>입력한 값이 ??? 앞에 들어가는 것을 확인할 수 있었다.<br><br>현재 저 Json은 자바스크립트로 묶어져 있는 코드들이다. 만약 입력값이 JS를 넣는다면 어떻게 되는지 확인해봤다.</p><p>input : <code>&lt;/script&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="/images/pasted-131.png"></p><p>원래의 JS가 한참 밑에도 있어야 하지만, 입력에 </script>를 넣어 끊어버렸다.<br><br>그리고 새로운 JS를 넣어서 alert 함수를 실행하였다.</p><h2 id="Medium-amp-High"><a href="#Medium-amp-High" class="headerlink" title="Medium &amp; High"></a>Medium &amp; High</h2><p><img src="/images/pasted-132.png"></p><p>htmlspecialchars 함수에 의해서 특수 문자가 HTML 엔티티로 이스케이프되면서 문자열로 출력되고 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-JSON/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (GET)</title>
      <link>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-GET/</link>
      <guid>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-GET/</guid>
      <pubDate>Sat, 13 Feb 2021 01:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Xss&quot;&gt;&lt;a href=&quot;#Xss&quot; class=&quot;headerlink&quot; title=&quot;Xss&quot;&gt;&lt;/a&gt;Xss&lt;/h1&gt;&lt;p&gt;Cross Site Scripting의 약자로, 해커가 사용자의 브라우저 내에서 악성 Javascript를 실행하는 취</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Xss"><a href="#Xss" class="headerlink" title="Xss"></a>Xss</h1><p>Cross Site Scripting의 약자로, 해커가 사용자의 브라우저 내에서 악성 Javascript를 실행하는 취약점이다.</p><p>현재의 Javascript는 웹상에서 없어선 안되는 존재입니다.<br><br>JavaScript가 피해자의 브라우저 페이지에서 실행되기 때문에 인증 된 사용자에 대한 민감한 세부 정보가 세션에서 도용 될 수 있으며, 본질적으로 악의적 인 행위자가 사이트 관리자를 표적으로 삼아 웹 사이트를 완전히 손상시킬 수 있습니다.</p><h2 id="Xss-공격-유형"><a href="#Xss-공격-유형" class="headerlink" title="Xss 공격 유형"></a>Xss 공격 유형</h2><h3 id="Stored-Persistent-Cross-Site-Scripting"><a href="#Stored-Persistent-Cross-Site-Scripting" class="headerlink" title="Stored (Persistent) Cross-Site Scripting"></a>Stored (Persistent) Cross-Site Scripting</h3><p>공격자의 페이로드(악성 Javascript)를 서버에 저장하여 웹사이트가 다른 방문자에게 페이로드를 전달하는 공격</p><h3 id="Reflected-Cross-Site-Scripting"><a href="#Reflected-Cross-Site-Scripting" class="headerlink" title="Reflected Cross-Site Scripting"></a>Reflected Cross-Site Scripting</h3><p>브라우저에서 서버로 전송된 공격자의 페이로드가 페이지에 반영이 될 때 발생되는 공격</p><h3 id="Self-Cross-Site-Scripting"><a href="#Self-Cross-Site-Scripting" class="headerlink" title="Self Cross-Site Scripting"></a>Self Cross-Site Scripting</h3><p>매우 구체적인 컨텍스트 및 수동 변경이 필요한 취약점을 악용할 때 발생되는 공격이라고 정의가 되어있는데,<br>나는 쉽게 생각해서, 악성 Javascript가 나한테만 일어나는 것이 Self Xss이라고 생각한다.</p><p>예제로, LRTK 블로그 BeeBox의 첫 문제풀이인 HTML Injection을 예제로 생각한다.<br><br>내가 입력한 값이 서버에 저장이 안되어, 다른 사용자들에게 피해를 입히지 못하는 것이 Self Xss의 예시라 생각한다.</p><h3 id="Blind-Cross-Site-Scripting"><a href="#Blind-Cross-Site-Scripting" class="headerlink" title="Blind Cross-Site Scripting"></a>Blind Cross-Site Scripting</h3><p>공격자가 공격의 결과를 볼 수 없는 공격<br><br>이러한 취약점은 일반적으로 권한이 있는 사용자만 액세스 할 수 있는 페이지에서 진행될 경우가 많다.</p><h3 id="Dom-Based-Cross-Site-Scripting"><a href="#Dom-Based-Cross-Site-Scripting" class="headerlink" title="Dom-Based Cross-Site Scripting"></a>Dom-Based Cross-Site Scripting</h3><p>이 공격은 서버 자체가 Xss에 취약한 것이 아닌 페이지의 Javascript가 취약할 때 발생되는 공격이다.</p><hr><h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-116.png"></p><p>이와 같이 First/Last name을 입력하여 서버에 넘겨주면, 서버는 입력된 값을 form 밑에 Welcome ‘first name’ ‘last name’으로 반영하여 다시 브라우저에 넘겨준다.</p><p>이를 이용하여 Javascript를 이용하여 쿠키를 alert 창으로 띄워 보겠다.</p><p>first name : <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code><br><br>last name : aaaa</p><p><img src="/images/pasted-117.png" alt="Javascript alert창"><br><img src="/images/pasted-118.png"></p><p>이 Xss은 페이지에서 자바스크립트를 그대로 반영하여 일어난 거지만, 관리자/다른 사용자들은 전혀 공격 대상으로 삼을 수 없으니, Self Xss로 봐도 무방하다.</p><p>Low 레벨에선 태그와 Javascript의 함수 등을 예외처리을 안하고 그대로 반영을 하여 Xss가 일어난 것으로 판단된다.</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>Low 문제와 똑같이 Javascript를 시도하였는데 그대로 반영이 되어 Xss가 일어났다.<br><br>분명 Low와 달리 Xss 방어를 했을거라 생각이 들어 다른 방법으로 시도하였다.</p><p>svg 파일을 불려오는데 만약 error가 생기면 Javascript가 발생되는 Xss 코드를 입력하였다.<br>first name : <code>&lt;svg src=&#39;#&#39; onerror=&#39;alert(document.cookie)&#39; /&gt;</code><br><br>last name : aaaa</p><p><img src="/images/pasted-120.png"></p><p>어떻게 방어를 했는지 보기 위해 개발자 도구를 이용하여 해당 Xss 코드를 살펴보았다.</p><p><code>&lt;svg src=&quot;\&#39;#\&#39;&quot; onerror=&quot;\&#39;alert(document.cookie)\&#39;&quot;&gt;&lt;/svg&gt;</code><br><br>서버에서 입력 받은 데이터가 예외처리를 받아 Xss 코드가 변경이 되었다.</p><p>차이점이라면, <code>&#39;</code>이 변경이 된 것 같다.<br><br>정확한 확인을 위해 first name에 <code>&#39;a&#39;</code>를 입력하여 확인하였다.</p><p><img src="/images/pasted-121.png"></p><p>변경 된 것을 확인 할 수 있었다.<br></p><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p><img src="/images/pasted-122.png"></p><p>코드를 분석하니, 입력 받은 데이터는 addslashes 함수에 넣어지고 있었다.</p><h4 id="addslashes-함수"><a href="#addslashes-함수" class="headerlink" title="addslashes 함수"></a><a href="https://www.php.net/manual/en/function.addslashes.php">addslashes 함수</a></h4><p>문자열에 <code>&#39;</code>, <code>&quot;</code>, <code>\</code>, <code>NUL</code>의 문자가 있으면 해당 문자 앞에 \를 추가하여 이스케이프하여 반환하는 함수이다.</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-123.png"><br><img src="/images/pasted-124.png"></p><p>위 Low, Medium Level에서 사용하였던 Xss 코드로 시도하였지만, Javascript로 반영되지 않고 문자열로 취급받아 반영되었다.</p><h3 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h3><p><img src="/images/pasted-125.png"></p><h4 id="htmlspecialchars-함수"><a href="#htmlspecialchars-함수" class="headerlink" title="htmlspecialchars 함수"></a><a href="https://www.php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars 함수</a></h4><p>HTML에서 특별한 의미를 가진 특정 문자(<code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code>, <code>&lt;</code>, <code>&gt;</code>)을 HTML 엔티티로 이스케이프하여 반환하는 함수이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/13/XSS-Reflected-GET/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Linked List</title>
      <link>https://lrtk-coder.github.io/2021/02/12/Data-Structure-Linked-List/</link>
      <guid>https://lrtk-coder.github.io/2021/02/12/Data-Structure-Linked-List/</guid>
      <pubDate>Fri, 12 Feb 2021 21:17:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Linked-List&quot;&gt;&lt;a href=&quot;#Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Linked List&quot;&gt;&lt;/a&gt;Linked List&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-113.png&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><p><img src="/images/pasted-113.png"></p><p>연결 리스트라고 많이 불림.<br><br>떨어진 곳에 존재하는 데이터의 주소를 저장하여, 연결해 관리하는 데이터 구조</p><p>배열과 많이 혼돈하지만, 배열은 순차적으로 메모리 공간에 데이터를 나열하는 데이터 구조<br><br>연결 리스트는 각기 다른 메모리 공간에 데이터를 저장하여, 데이터의 저장 공간 주소가 저장 필요</p><h2 id="알아둘-용어"><a href="#알아둘-용어" class="headerlink" title="알아둘 용어"></a>알아둘 용어</h2><ul><li>노드(Node) : 데이터 저장 단위(데이터 값, 포인터)로 구성</li><li>포인터(Pointer) : 각 노드 안에서, 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간</li></ul><h2 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>미리 데이터 공간을 할당하지 않아도 됨</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>연결을 위한 별도의 데이터 공간(Pointer)이 필요함으로, 저장 공간 효율이 높지 않음</li><li>연결 정보를 찾는 시간이 필요하므로 접근 속도가 느림</li><li>중간 데이터 삭제/삽입 시, 앞뒤 데이터의 연결을 재 구성해야 하는 부가적인 작업 필요함</li></ul><h2 id="다양한-연결-리스트"><a href="#다양한-연결-리스트" class="headerlink" title="다양한 연결 리스트"></a>다양한 연결 리스트</h2><h3 id="이중-연결-리스트"><a href="#이중-연결-리스트" class="headerlink" title="이중 연결 리스트"></a>이중 연결 리스트</h3><p><img src="/images/pasted-114.png"></p><h3 id="원형-연결-리스트"><a href="#원형-연결-리스트" class="headerlink" title="원형 연결 리스트"></a>원형 연결 리스트</h3><p><img src="/images/pasted-115.png"></p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Linked-List/">Linked List</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/12/Data-Structure-Linked-List/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 10179번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10179%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10179%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Thu, 11 Feb 2021 19:42:28 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;쿠폰&quot;&gt;&lt;a href=&quot;#쿠폰&quot; class=&quot;headerlink&quot; title=&quot;쿠폰&quot;&gt;&lt;/a&gt;&lt;a href=&quot;&quot;&gt;쿠폰&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;당신은 어떤 물건이라도 20% 할인해주는 쿠폰을 가지고 있다.&lt;/p&gt;
&lt;p&gt;원래 가격이 주어질 때,</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="쿠폰"><a href="#쿠폰" class="headerlink" title="쿠폰"></a><a href="">쿠폰</a></h1><p>당신은 어떤 물건이라도 20% 할인해주는 쿠폰을 가지고 있다.</p><p>원래 가격이 주어질 때, 쿠폰을 사용하면 얼마가 되는지 알려주는 프로그램을 작성하시오.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><p><img src="/images/pasted-110.png"></p><p>list comprehension을 이용하여 판매가를 입력받아 리스트로 저장하였다.<br></p><p>그리고 for문을 이용하여 20%을 곱하여 할인된 가격을 출력하였다.</p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><p><img src="/images/pasted-111.png"></p><p>문자열로 표현된 문을 받아 실행하는 exec 함수를 이용하여 문제풀이를 하였다.</p><p>exec 함수가 실행되기 전, 제일 마지막에 있는 int(input())은 문자열이 아니기 때문에 제일 먼저 실행이 된다.</p><p>문자열로 되어있는 부분은 exec 함수가 실행시키는 부분인데, 입력 받은 값을 <code>*0.8</code>을 해주어 할인가을 구하고 출력한다.</p>]]></content:encoded>
      
      
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10179%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Session Mgmt - Session ID in URL</title>
      <link>https://lrtk-coder.github.io/2021/02/11/Session-Mgmt-Session-ID-in-URL/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/Session-Mgmt-Session-ID-in-URL/</guid>
      <pubDate>Thu, 11 Feb 2021 18:09:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-107.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;세션 ID는 URL에 노출되면 안된다는 문구</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-107.png"></p><p>세션 ID는 URL에 노출되면 안된다는 문구가 있다.</p><p><img src="/images/pasted-108.png"></p><p>확인해보니, 파라미터 값으로 쿠키를 유출하고 있었다.</p><hr><h2 id="Medium-amp-High"><a href="#Medium-amp-High" class="headerlink" title="Medium &amp; High"></a>Medium &amp; High</h2><p><img src="/images/pasted-109.png"></p><p>파라미터로 쿠키를 유출되는 것을 막았다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/Session-Mgmt-Session-ID-in-URL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Stack 구현</title>
      <link>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack-%EA%B5%AC%ED%98%84/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack-%EA%B5%AC%ED%98%84/</guid>
      <pubDate>Thu, 11 Feb 2021 14:37:00 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;code&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight python"><figcaption><span>code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.stack.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = Stack()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        Stack.push(_)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Stack Print &gt;&gt;&gt;&#x27;</span>, *s)</span><br><span class="line">    print(<span class="string">&#x27;Stack Pop &gt;&gt;&gt;&#x27;</span>, s.pop())</span><br><span class="line">    print(<span class="string">&#x27;Stack Pop &gt;&gt;&gt;&#x27;</span>, s.pop())</span><br><span class="line">    print(<span class="string">&#x27;Stack Print &gt;&gt;&gt;&#x27;</span>, *s)</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack Print &gt;&gt;&gt; 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Stack Pop &gt;&gt;&gt; 9</span><br><span class="line">Stack Pop &gt;&gt;&gt; 8</span><br><span class="line">Stack Print &gt;&gt;&gt; 0 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Stack/">Stack</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack-%EA%B5%AC%ED%98%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Stack</title>
      <link>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack/</guid>
      <pubDate>Thu, 11 Feb 2021 14:31:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-106.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;가장 나중에 쌓은 데이터를 가</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><p><img src="/images/pasted-106.png"></p><p>가장 나중에 쌓은 데이터를 가장 먼저 꺼낼 수 있는 데이터 구조 (LIFO - Last In, First Out)<br><br>흔히 책상에 책을 쌓는 거랑 똑같다고 생각하면 됨.<br><br></p><h2 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>구조가 단순해서, 구현이 쉽다.</li><li>데이터 저장/읽기 속도가 빠르다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>데이터 최대 갯수를 미리 정해야 한다. (파이썬의 경우, 재귀 함수는 최대 1000번까지 가능)</li><li>저장 공간의 낭비가 발생할 수 있다.</li></ul><blockquote><p>하지만, 필요한 만큼의 스택의 공간만 세팅을 한다면, 저장 공간 낭비를 막을 수 있다.</p></blockquote><h2 id="알아둘-용어"><a href="#알아둘-용어" class="headerlink" title="알아둘 용어"></a>알아둘 용어</h2><ul><li>push : 데이터를 스택에 넣기</li><li>pop : 데이터를 스택에 꺼내기</li></ul><h2 id="파이썬에서-Stack-사용하기"><a href="#파이썬에서-Stack-사용하기" class="headerlink" title="파이썬에서 Stack 사용하기"></a>파이썬에서 Stack 사용하기</h2><p>Stack은 파이썬에서 Queue 라이브러리처럼 지원을 하지 않음.<br><br>하지만, List을 이용하여 보다 쉽게 구현 가능함.</p><figure class="highlight python"><figcaption><span>code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stack = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">stack.append(<span class="number">1</span>)</span><br><span class="line">stack.append(<span class="number">2</span>)</span><br><span class="line">stack.append(<span class="number">3</span>)</span><br><span class="line">stack.append(<span class="number">4</span>)</span><br><span class="line">stack.append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Stack Print &gt;&gt;&gt;&#x27;</span>, *stack)</span><br><span class="line">print(<span class="string">&#x27;Stack Pop &gt;&gt;&gt;&#x27;</span>, stack.pop())</span><br><span class="line">print(<span class="string">&#x27;Stack Pop &gt;&gt;&gt;&#x27;</span>, stack.pop())</span><br><span class="line">print(<span class="string">&#x27;Stack Print &gt;&gt;&gt;&#x27;</span>, *stack)</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack Print &gt;&gt;&gt; 1 2 3 4 5</span><br><span class="line">Stack Pop &gt;&gt;&gt; 5</span><br><span class="line">Stack Pop &gt;&gt;&gt; 4</span><br><span class="line">Stack Print &gt;&gt;&gt; 1 2 3</span><br></pre></td></tr></table></figure><h2 id="어디에-사용할까"><a href="#어디에-사용할까" class="headerlink" title="어디에 사용할까?"></a>어디에 사용할까?</h2><p>스택은 많은 곳에 사용되는데, 대표적으로 프로세스의 함수 동작 방식에 사용함.<br><br>함수 호출 시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장한다.</p><p>위의 설명은 리버싱 공부를 한다면 많이 볼 것이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Stack/">Stack</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/Data-Structure-Stack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Queue 구현</title>
      <link>https://lrtk-coder.github.io/2021/02/11/Data-Structure-enqueue-dequeue-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/Data-Structure-enqueue-dequeue-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/</guid>
      <pubDate>Thu, 11 Feb 2021 09:28:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;파이썬의-리스트-변수를-이용하여-Queue-구현&quot;&gt;&lt;a href=&quot;#파이썬의-리스트-변수를-이용하여-Queue-구현&quot; class=&quot;headerlink&quot; title=&quot;파이썬의 리스트 변수를 이용하여 Queue 구현&quot;&gt;&lt;/a&gt;파이썬의 리스트</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="파이썬의-리스트-변수를-이용하여-Queue-구현"><a href="#파이썬의-리스트-변수를-이용하여-Queue-구현" class="headerlink" title="파이썬의 리스트 변수를 이용하여 Queue 구현"></a>파이썬의 리스트 변수를 이용하여 Queue 구현</h1><figure class="highlight python"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Implementing a Queue with list variables&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.queue_list = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.queue_list.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.queue_list[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> self.queue_list[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.queue_list.__len__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifoQueue</span>(<span class="params">Queue</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Implementing a LifoQueue with list variables&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.queue_list[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.queue_list[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>(<span class="params">Queue</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Implementing a PriorityQueue with list variables&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.queue_list) == <span class="number">0</span>:</span><br><span class="line">            self.queue_list.append(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.queue_list)):</span><br><span class="line">                <span class="keyword">if</span> data[<span class="number">0</span>] &lt; self.queue_list[_][<span class="number">0</span>]:</span><br><span class="line">                    self.queue_list.insert(_ ,data)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            self.queue_list.append(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;-&#x27;</span>*<span class="number">5</span> + <span class="string">&#x27;Queue&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># Queue instance 선언</span></span><br><span class="line">    queue = Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0~9 enqueue</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        queue.enqueue(_)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Size of Queue &gt;&gt;&gt;&#x27;</span>, queue.size())</span><br><span class="line">    print(<span class="string">&#x27;Queue Print &gt;&gt;&gt;&#x27;</span>, *queue.queue_list)</span><br><span class="line">    print(<span class="string">&#x27;Queue Dequeue &gt;&gt;&gt;&#x27;</span>, queue.dequeue())</span><br><span class="line">    print(<span class="string">&#x27;Queue Print &gt;&gt;&gt;&#x27;</span>, *queue.queue_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;\n\n&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">5</span> + <span class="string">&#x27;LifoQueue&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># LifoQueue instance 선언</span></span><br><span class="line">    lifo_queue = LifoQueue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0~9 enqueue</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        lifo_queue.enqueue(_)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Size of LifoQueue &gt;&gt;&gt;&#x27;</span>, lifo_queue.size())</span><br><span class="line">    print(<span class="string">&#x27;LifoQueue Print &gt;&gt;&gt;&#x27;</span>, *lifo_queue.queue_list)</span><br><span class="line">    print(<span class="string">&#x27;LifoQueue Dequeue &gt;&gt;&gt;&#x27;</span>, lifo_queue.dequeue())</span><br><span class="line">    print(<span class="string">&#x27;LifoQueue Print &gt;&gt;&gt;&#x27;</span>, *lifo_queue.queue_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;\n\n&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">5</span> + <span class="string">&#x27;PriorityQueue&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># PriorityQueue instance 선언</span></span><br><span class="line">    priority_queue = PriorityQueue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Queue enqueue</span></span><br><span class="line">    priority_queue.enqueue((<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    priority_queue.enqueue((<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">    priority_queue.enqueue((<span class="number">-1</span>, <span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">    priority_queue.enqueue((<span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>))</span><br><span class="line">    priority_queue.enqueue((<span class="number">5</span>, <span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">    priority_queue.enqueue((<span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Size of PriorityQueue &gt;&gt;&gt;&#x27;</span>, priority_queue.size())</span><br><span class="line">    print(<span class="string">&#x27;PriorityQueue Print &gt;&gt;&gt;&#x27;</span>, *priority_queue.queue_list)</span><br><span class="line">    print(<span class="string">&#x27;PriorityQueue Dequeue &gt;&gt;&gt;&#x27;</span>, priority_queue.dequeue())</span><br><span class="line">    print(<span class="string">&#x27;PriorityQueue Print &gt;&gt;&gt;&#x27;</span>, *priority_queue.queue_list)</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-----Queue-----</span><br><span class="line">Size of Queue &gt;&gt;&gt; 10</span><br><span class="line">Queue Print &gt;&gt;&gt; 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Queue Dequeue &gt;&gt;&gt; 0</span><br><span class="line">Queue Print &gt;&gt;&gt; 1 2 3 4 5 6 7 8 9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----LifoQueue-----</span><br><span class="line">Size of LifoQueue &gt;&gt;&gt; 10</span><br><span class="line">LifoQueue Print &gt;&gt;&gt; 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">LifoQueue Dequeue &gt;&gt;&gt; 9</span><br><span class="line">LifoQueue Print &gt;&gt;&gt; 0 1 2 3 4 5 6 7 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----PriorityQueue-----</span><br><span class="line">Size of PriorityQueue &gt;&gt;&gt; 6</span><br><span class="line">PriorityQueue Print &gt;&gt;&gt; (-1, <span class="string">&#x27;c&#x27;</span>) (1, <span class="string">&#x27;a&#x27;</span>) (2, <span class="string">&#x27;b&#x27;</span>) (4, <span class="string">&#x27;d&#x27;</span>) (5, <span class="string">&#x27;e&#x27;</span>) (5, <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">PriorityQueue Dequeue &gt;&gt;&gt; (-1, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">PriorityQueue Print &gt;&gt;&gt; (1, <span class="string">&#x27;a&#x27;</span>) (2, <span class="string">&#x27;b&#x27;</span>) (4, <span class="string">&#x27;d&#x27;</span>) (5, <span class="string">&#x27;e&#x27;</span>) (5, <span class="string">&#x27;f&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Queue/">Queue</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/Data-Structure-enqueue-dequeue-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 11948번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-11948%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-11948%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Thu, 11 Feb 2021 06:46:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;과목선택&quot;&gt;&lt;a href=&quot;#과목선택&quot; class=&quot;headerlink&quot; title=&quot;과목선택&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11948&quot;&gt;과목선택&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;JOI는 물리, 화</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="과목선택"><a href="#과목선택" class="headerlink" title="과목선택"></a><a href="https://www.acmicpc.net/problem/11948">과목선택</a></h1><p>JOI는 물리, 화학, 생물, 지구과학, 역사, 지리 총 6 과목의 시험을 봤다. 각 시험의 만점은 100점이다.</p><p>JOI는 물리, 화학, 생물, 지구과학 4과목 중에서 3 과목을 선택하고 역사, 지리 2 과목 중에서 한 과목을 선택한다.</p><p>시험 점수의 합이 가장 높게 나오도록 과목을 선택할 때, JOI가 선택한 과목의 시험 점수의 합을 구하시오.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><p><img src="/images/pasted-103.png"></p><p>입력값들을 리스트로 입력받아서 인덱싱을 해줬다.<br><br>먼저 0번째부터 3번째까지 인덱싱을 하면, 물리, 화확, 생물, 지구과학 입력값만 얻을 수 있다.<br></p><p>그 후 정렬하면, 가장 작은 수가 0번째로 가기 때문에 0번째를 버리면 된다.</p><p>그 후 나머지 값을 max 함수를 이용하여 가장 큰 수만 얻은 후 더해주면 된다.</p><hr><h1 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h1><p><img src="/images/pasted-104.png"></p><p>이 풀이는 Asterisk(*)를 이용하여 간단하게 풀이하였다.<br><br>Asterisk는 브론즈5에서 설명한 글이 있으니, 참고하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/11/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-11948%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Queue</title>
      <link>https://lrtk-coder.github.io/2021/02/10/Data-Structure-Queue/</link>
      <guid>https://lrtk-coder.github.io/2021/02/10/Data-Structure-Queue/</guid>
      <pubDate>Wed, 10 Feb 2021 23:31:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Queue&quot;&gt;&lt;a href=&quot;#Queue&quot; class=&quot;headerlink&quot; title=&quot;Queue&quot;&gt;&lt;/a&gt;Queue&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-105.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;가장 먼저 넣은 데이터를 가장</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><p><img src="/images/pasted-105.png"></p><p>가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조 (FIFO - First In, First Out)<br><br>흔히 놀이공원에서 줄 쓰는 거랑 같다고 생각하면 됨.<br><br></p><h2 id="알아둘-용어"><a href="#알아둘-용어" class="headerlink" title="알아둘 용어"></a>알아둘 용어</h2><ul><li>Enqueue (Push) : 큐에 데이터를 넣는 기능</li><li>Dequeue (Pop) : 큐에서 데이터를 꺼내는 기능<br></li></ul><h2 id="파이썬에서-Queue-라이브러리-활용해서-큐-사용하기"><a href="#파이썬에서-Queue-라이브러리-활용해서-큐-사용하기" class="headerlink" title="파이썬에서 Queue 라이브러리 활용해서 큐 사용하기"></a>파이썬에서 Queue 라이브러리 활용해서 큐 사용하기</h2><p>파이썬의 queue 라이브러리에는 다양한 큐( Queue(), LifoQueue(), PriorityQueue() ) 제공됨.</p><ul><li>Queue() : 일반적인 Queue</li><li>LifoQueue() : 나중에 입력된 데이터가 먼저 출력되는 구조 (스택)</li><li>PriorityQueue() : 데이터마다 우선 순위를 넣어서, 우선 순위가 높은 순으로 데이터 출력</li></ul><h3 id="Queue-사용하기"><a href="#Queue-사용하기" class="headerlink" title="Queue() 사용하기"></a>Queue() 사용하기</h3><figure class="highlight python"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Put</span></span><br><span class="line">data_queue.put(<span class="string">&#x27;1번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;2번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;3번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;4번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;5번째 데이터&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue의 크기</span></span><br><span class="line">print(<span class="string">&#x27;Size of Queue &gt;&gt;&gt; &#x27;</span>, data_queue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Pop</span></span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of Queue &gt;&gt;&gt;  5</span><br><span class="line">Queue Pop &gt;&gt;&gt; 1번째 데이터</span><br><span class="line">Queue Pop &gt;&gt;&gt; 2번째 데이터</span><br></pre></td></tr></table></figure><h3 id="LifoQueue-사용하기"><a href="#LifoQueue-사용하기" class="headerlink" title="LifoQueue() 사용하기"></a>LifoQueue() 사용하기</h3><figure class="highlight python"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.LifoQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Put</span></span><br><span class="line">data_queue.put(<span class="string">&#x27;1번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;2번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;3번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;4번째 데이터&#x27;</span>)</span><br><span class="line">data_queue.put(<span class="string">&#x27;5번째 데이터&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue의 크기</span></span><br><span class="line">print(<span class="string">&#x27;Size of Queue &gt;&gt;&gt; &#x27;</span>, data_queue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Pop</span></span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of Queue &gt;&gt;&gt;  5</span><br><span class="line">Queue Pop &gt;&gt;&gt; 5번째 데이터</span><br><span class="line">Queue Pop &gt;&gt;&gt; 4번째 데이터</span><br></pre></td></tr></table></figure><h3 id="PriotityQueue-사용하기"><a href="#PriotityQueue-사용하기" class="headerlink" title="PriotityQueue() 사용하기"></a>PriotityQueue() 사용하기</h3><figure class="highlight python"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Put</span></span><br><span class="line">data_queue.put((<span class="number">4</span>, <span class="string">&#x27;1번째 데이터&#x27;</span>))</span><br><span class="line">data_queue.put((<span class="number">5</span>, <span class="string">&#x27;2번째 데이터&#x27;</span>))</span><br><span class="line">data_queue.put((<span class="number">2</span>, <span class="string">&#x27;3번째 데이터&#x27;</span>))</span><br><span class="line">data_queue.put((<span class="number">1</span>, <span class="string">&#x27;4번째 데이터&#x27;</span>))</span><br><span class="line">data_queue.put((<span class="number">3</span>, <span class="string">&#x27;5번째 데이터&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue의 크기</span></span><br><span class="line">print(<span class="string">&#x27;Size of Queue &gt;&gt;&gt; &#x27;</span>, data_queue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Queue Pop</span></span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br><span class="line">print(<span class="string">&#x27;Queue Pop &gt;&gt;&gt;&#x27;</span>, data_queue.get())</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><figcaption><span>출력</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of Queue &gt;&gt;&gt;  5</span><br><span class="line">Queue Pop &gt;&gt;&gt; (1, <span class="string">&#x27;4번째 데이터&#x27;</span>)</span><br><span class="line">Queue Pop &gt;&gt;&gt; (2, <span class="string">&#x27;3번째 데이터&#x27;</span>)</span><br></pre></td></tr></table></figure><p>우선 순위는 공무원 7급 &gt; 8급 &gt; 9급처럼 낮은 숫자가 우선 순위가 높다.</p><h2 id="어디에-사용할까"><a href="#어디에-사용할까" class="headerlink" title="어디에 사용할까?"></a>어디에 사용할까?</h2><p>어떠한 작업/데이터를 순서대로 실행/사용하기 위해 대기시킬 때 사용함.<br><br>ex) 멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현하기 위해 많이 사용됨 (운영체제)</p><p>실제로 사람들이 식당이나 놀이공원에서 어떻게 대기하는지 생각하면 된다.<br><br>자원은 식당의 공간이 한정적이니깐, 먼저 온 사람 순으로 먹기 위해선 FIFO로 해야된다.</p><p>이와 마찬가지로 CPU는 한정적이니 프로그램이 CPU를 얻기 위해서 대기를 해야하는데 이를 구현하기 위해 Queue를 사용하는 것이다.</p><p>ProiorityQueue는 놀이공원의 VIP 티켓이라 생각하면된다. VIP는 늦게와도 먼저 들어가니깐…</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Queue/">Queue</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/10/Data-Structure-Queue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 17362번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17362%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17362%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Wed, 10 Feb 2021 04:25:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;수학은-체육과목-입니다-2&quot;&gt;&lt;a href=&quot;#수학은-체육과목-입니다-2&quot; class=&quot;headerlink&quot; title=&quot;수학은 체육과목 입니다 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/173</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="수학은-체육과목-입니다-2"><a href="#수학은-체육과목-입니다-2" class="headerlink" title="수학은 체육과목 입니다 2"></a><a href="https://www.acmicpc.net/problem/17362">수학은 체육과목 입니다 2</a></h1><p>이 사진을 기억하는가?</p><p><img src="/images/pasted-93.png"></p><p>이 사진은 오래전부터 인터넷에 돌아다니는 사진으로, 작년 전대프연 예선 A번에서는 수학을 정말 못 하는 고등학생인 성원이의 시험지로 소개되었다. 저작권이 있는 사진일 수 있어 알아보기 어렵게 가공했음을 양해 바란다.</p><p>예선 날짜가 다가오는데도 적당한 A번 문제를 생각하지 못한 출제진은 작년 전대프연 예선 A번을 응용해서 문제를 만들기로 했다. 이를 위해 사진 속 문제를 찾아본 출제진은 해당 문제가 2007학년도 6월 고등학교 1학년 전국연합학력평가 수리 영역 26번임을 알게 되었다.</p><p>시험지를 내려받고 문제들을 살펴보던 출제진은 아래와 같은 문제를 발견했다.</p><p><img src="/images/pasted-94.png"></p><p>예상했겠지만, 여러분은 이제 위의 19번 문제 세 번째 줄에 등장하는 수 ‘1000’을 임의의 자연수로 바꾸었을 때 그에 해당하는 답을 출력하는 프로그램을 작성해야 한다.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">   2  3  4</span><br><span class="line">            5</span><br><span class="line">   8  7  6</span><br><span class="line">9</span><br><span class="line">   10 11 12</span><br><span class="line">            13 </span><br><span class="line">   16 15 14</span><br><span class="line">17</span><br><span class="line">   18 19 20 </span><br></pre></td></tr></table></figure><p>문제를 읽어보니 이런 형태로 숫자가 흘려가고 있었다.<br><br>엄지에서 새끼을 찍고, 다시 엄지로 돌아가는데 이 주기가 8 숫자라는 것을 파악을 했다.</p><p>그럼 8로 나눈 나머지를 보고 어떤 손가락에 들어갈 지를 결정할 수 있을거라 생각하였다.</p><p>1~10를 8로 나누어 보면 <code>1, 2, 3, 4, 5, 6, 7, 0, 1, 2</code>이라는 나머지가 나온다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">   2  3  4</span><br><span class="line">            5</span><br><span class="line">   0  7  6</span><br><span class="line">1</span><br><span class="line">   2</span><br></pre></td></tr></table></figure><p>이를 좀더 쉬게 보기 위해 위에 나온 손가락의 형태로 정렬하였다.<br></p><ul><li>엄지 : 1</li><li>검지 : 2, 0</li><li>중지 : 3, 7</li><li>약지 : 4, 6</li><li>새끼 : 5</li></ul><p>검증을 시도하니, 해당 손가락의 숫자을 찾을 수 있었다.</p><p>좀 더 많은 숫자들로 정확한 검증을 위해 코드를 짜서 검증을 하였다.</p><h3 id="검증코드"><a href="#검증코드" class="headerlink" title="검증코드"></a>검증코드</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">finger_dict = &#123;<span class="number">1</span> : [], <span class="number">2</span> : [], <span class="number">3</span> : [], <span class="number">4</span> : [], <span class="number">5</span> : []&#125;</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    print(_%<span class="number">8</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> _%<span class="number">8</span> == <span class="number">1</span>: finger_dict[<span class="number">1</span>].append(_)</span><br><span class="line">    <span class="keyword">elif</span> _%<span class="number">8</span> <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">0</span>]: finger_dict[<span class="number">2</span>].append(_)</span><br><span class="line">    <span class="keyword">elif</span> _%<span class="number">8</span> <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">7</span>]: finger_dict[<span class="number">3</span>].append(_)</span><br><span class="line">    <span class="keyword">elif</span> _%<span class="number">8</span> <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>]: finger_dict[<span class="number">4</span>].append(_)</span><br><span class="line">    <span class="keyword">elif</span> _%<span class="number">8</span> == <span class="number">5</span>: finger_dict[<span class="number">5</span>].append(_)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line">print(finger_dict)</span><br></pre></td></tr></table></figure><p>dict의 Key는 손가락을 가르키는 숫자이며, for문으로 1~20을 8로 나눈 나머지 값들을 가지고, 해당 손가락의 리스트에 값을 넣어줬다.</p><p><img src="/images/pasted-95.png" alt="검증코드 출력"></p><p>8로 나눈 나머지가 손가락의 위치를 지정할 수 있다는 논리가 검증이 되었다.</p><p>이를 가지고 문제풀이를 하였다.</p><p><img src="/images/pasted-97.png" alt="문제풀이"></p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><p><img src="/images/pasted-96.png" alt="숏코딩 문제풀이"></p><p>해당 손가락 위치의 값을 알았으니, 인덱스로 좀 더 간단하게 만들 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/10/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-17362%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Session Mgmt - Cookies (HTTPOnly)</title>
      <link>https://lrtk-coder.github.io/2021/02/09/Session-Mgmt-Cookies-HTTPOnly/</link>
      <guid>https://lrtk-coder.github.io/2021/02/09/Session-Mgmt-Cookies-HTTPOnly/</guid>
      <pubDate>Tue, 09 Feb 2021 07:10:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;HttpOnly&quot;&gt;&lt;a href=&quot;#HttpOnly&quot; class=&quot;headerlink&quot; title=&quot;HttpOnly&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://opentutorials.org/course/3387/21744&quot;&gt;HttpOnly</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a><a href="https://opentutorials.org/course/3387/21744">HttpOnly</a></h1><p>XSS 같은 공격으로 쿠키 탈취를 방지하기 위해, 자바스크립트의 document.cookie 함수를 사용하여 쿠키에 접근하는 것을 방지하는 옵션이다.</p><hr><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-77.png"></p><p>쿠키를 확인할 수 있도록 구현된 페이지인 것 같다.<br></p><p><img src="/images/pasted-83.png"></p><p><img src="/images/pasted-84.png"></p><p>위와 같이 ‘Cookies’ 버튼을 클릭 시 쿠키 및 관련 정보들이 테이블에 출력되며, here를 클릭 시 javascript의 alert창으로 쿠키 및 관련 정보를 출력하였다.</p><p><img src="/images/pasted-85.png"></p><p>개발자 도구로 확인해보니, HttpOnly는 적용되어 있지 않다.</p><p><img src="/images/pasted-87.png" alt="LRTK 계정"><br><img src="/images/pasted-88.png" alt="Bee 계정"></p><p>쿠키 탈취 예제를 위해 일반 크롬과 시크릿 모드 크롬 두 개를 키고, 하나는 bee 계정으로 로그인을 하고, 다른 하나는 다른 아이디로 로그인을 하여 bee 계정의 쿠키를 탈취했다는 가정하에 bee 계정의 쿠키를 이용하여 bee로 로그인을 시도하였다.</p><p><img src="/images/pasted-89.png" alt="쿠키 변경"></p><p><img src="/images/pasted-90.png" alt="LRTK -&gt; Bee로 로그인 성공"></p><p>위와 같이 공격자가 쿠키를 탈취 시 쿠키를 이용하여 다른 계정으로 로그인을 할 수 있다.</p><hr><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-91.png"><br>이번에는 top_security의 값이 maybe이며, HttpOnly로 되어있다.</p><p>이 경우, javascript의 document.cookie에선 top_security이 출력이 안될 것이다.</p><p><img src="/images/pasted-92.png" alt="top_security 출력 X"></p><p>만약 해커가 document.cookie 함수를 이용한 csrf 공격으로 다른 서버에 해당 사이트 계정의 쿠키값을 보낸다는 시나리오라면 top_security는 실패할 것이다.</p><p>해당 우회 방법은 XST(Cross Site Tracing)이 있는데, Trace 옵션이 켜져있을 때만 가능한 공격이다.</p><hr><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>High에선 Medium에선 1시간이였던 top_security의 사용 시간이 5분으로 줄었다.</p><p>다른 차이점은 없다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/09/Session-Mgmt-Cookies-HTTPOnly/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 10768번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10768%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10768%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Tue, 09 Feb 2021 05:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;특별한-날&quot;&gt;&lt;a href=&quot;#특별한-날&quot; class=&quot;headerlink&quot; title=&quot;특별한 날&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10768&quot;&gt;특별한 날&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;2월 18일</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="특별한-날"><a href="#특별한-날" class="headerlink" title="특별한 날"></a><a href="https://www.acmicpc.net/problem/10768">특별한 날</a></h1><p>2월 18일은 올해 CCC에 있어서 특별한 날이다.</p><p>사용자로부터 정수인 월과 일을 입력받아 날짜가 2월 18일인지 전인지 후인지를 출력하는 프로그램이다.</p><p>만약 날짜가 2월 18일 전이면, “Before”을 출력한다. 만약 날짜가 2월 18일 후면, “After”을 출력한다. 만약 2월 18일이라면 “Special” 을 출력한다.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><p><img src="/images/pasted-75.png"></p><p>조건문으로 풀이하였다.<br><br>조건이 많아 엄청 비효율적으로 보인다.</p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><p><img src="/images/pasted-76.png"></p><p>이번엔 입력받은 1월 = 30일 기준으로 잡아 일 단위로 변경하여 총 일을 구하여 인덱싱을 이용하여 풀이를 하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/09/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-10768%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 5575번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5575%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5575%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Mon, 08 Feb 2021 02:50:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;타임-카드&quot;&gt;&lt;a href=&quot;#타임-카드&quot; class=&quot;headerlink&quot; title=&quot;타임 카드&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/5575&quot;&gt;타임 카드&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;JOI 상사는</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="타임-카드"><a href="#타임-카드" class="headerlink" title="타임 카드"></a><a href="https://www.acmicpc.net/problem/5575">타임 카드</a></h1><p>JOI 상사는 직원의 근무시간을 타임 카드로 관리하고있다. 직원들은 전용 장비를 사용하여 타임 카드에 출근 시간을 기록한다. 근무를 마치고 퇴근할 때도 타임 카드에 퇴근 시간을 기록한다. 타임카드에서 사용하는 시간단위는 24 시간제를 사용한다.</p><p>보안상의 이유로 직원들의 출근 시간은 7시 이후이다. 또한, 모든 직원은 23시 이전에 퇴근한다. 직원의 퇴근 시간은 항상 출근 시간보다 늦다.</p><p>입력으로 JOI 상사의 3 명의 직원 A 씨, B 씨, C 씨의 출근 시간과 퇴근 시간이 주어 졌을 때 각 직원의 근무시간을 계산하는 프로그램을 작성하라.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><p><img src="/images/pasted-73.png"></p><p>나는 work_time이라는 함수를 따로 만들어서 시간 계산 후 계산 결과값을 출력하였다.</p><p>work_time 함수는 입력값을 리스트에 저장한 변수를 매개변수로 입력받아 초단위로 계산하여 출근 시간과 퇴근 시간을 빼주어 나온 값을 시분초 단위로 계산한 함수이다.</p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><p><img src="/images/pasted-74.png"></p><p>해당 풀이는 3명의 입력값을 모두 받고 출력하는 것이 아닌, 한 명의 입력값을 입력받아서 계산 후 출력하는 것을 3번 반복한 코드이다.</p><p>또한 한줄로 되어있어서 그렇지, 풀어서 보면 어렵지 않은 코드이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon-bronze4/">baekjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/08/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5575%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Session Mgmt - Administrative Portals</title>
      <link>https://lrtk-coder.github.io/2021/02/07/Session-Mgmt-Administrative-Portals/</link>
      <guid>https://lrtk-coder.github.io/2021/02/07/Session-Mgmt-Administrative-Portals/</guid>
      <pubDate>Sun, 07 Feb 2021 19:28:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Low&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-65.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;관리자 페이지로 들어가는 것이 이 문제의 목표</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-65.png"></p><p>관리자 페이지로 들어가는 것이 이 문제의 목표인 듯 하다.<br><br>힌트에선, URL를 확인하라고 한다.</p><p>URL : <code>\smgmt_admin_portal.php?admin=0</code><br><br>확인하니, 파라미터로 admin을 전달하고 있다.</p><p>저 파라미터를 조작하면 어떻게 되는지 확인하기 위해 0에서 1로 변경하여 서버에 요청하였다.</p><p><img src="/images/pasted-66.png" alt="URL : `/smgmt_admin_portal.php?admin=1`"></p><p>페이지의 잠금이 해제가 되었다는 출력 값이 나왔다.</p><p>관리자 페이지를 파라미터 값으로 관리하는 것이 매우 취약하였다.</p><hr><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-67.png"></p><p>이번에는 쿠키로 관리를 하는 듯 하다.<br><br>관리자 도구를 이용하여 확인하였다.</p><p><img src="/images/pasted-68.png"><br>Low에서 했던 것처럼 admin을 1로 변경하겠다.</p><p><img src="/images/pasted-69.png"></p><p>잠금 해제 출력 값이 나왔다.<br><br>옛날에 공유기의 관리자 사이트에서 쿠키값을 변경하면 로그인이 되었던 취약점이 있었다고 말했는데, 이걸 보니 그때 말해주었던 이야기가 생각이 난다.</p><hr><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-70.png"></p><p>들어갔더니, 바로 잠금 해제가 되어있다.<br><br>왜 그런가 했더니, DBA 권한를 가진 유저만 해제할 수 있도록 한 것으로 추측된다.</p><p><img src="/images/pasted-71.png"></p><p>전에 만들었던 LRTK 계정으로 로그인하여 확인해보니 잠금이 걸어져 있었다.</p><p>이렇게 방어를 하면, DBA 권한을 가진 유저를 해킹하여 사이트로 들어가는 수 밖에 없으므로 좀 더 안전하다고 생각된다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/07/Session-Mgmt-Administrative-Portals/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Broken Auth - Weak Passwords</title>
      <link>https://lrtk-coder.github.io/2021/02/07/Broken-Auth-Weak-Passwords/</link>
      <guid>https://lrtk-coder.github.io/2021/02/07/Broken-Auth-Weak-Passwords/</guid>
      <pubDate>Sun, 07 Feb 2021 18:54:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Low-amp-Medium-amp-High&quot;&gt;&lt;a href=&quot;#Low-amp-Medium-amp-High&quot; class=&quot;headerlink&quot; title=&quot;Low &amp;amp; Medium &amp;amp; High&quot;&gt;&lt;/a&gt;Low &amp;amp; Med</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Low-amp-Medium-amp-High"><a href="#Low-amp-Medium-amp-High" class="headerlink" title="Low &amp; Medium &amp; High"></a>Low &amp; Medium &amp; High</h2><p><img src="/images/pasted-61.png"></p><p>문제의 제목이 취약한 패스워드이다.<br><br>예상으로는 디폴트 패스워드나 보안이 낮은 패스워드를 이용하여 문제를 풀어야 할 것 같다.</p><p>현 문제에서 어떠한 계정의 정보도 없어서 일단 bee 계정으로 로그인을 시도하였다.</p><p><img src="/images/pasted-62.png"></p><p>로그인 실패 값이 출력되었다.<br><br>특정 계정이 있는거 같은데, 일단 ID값을 admin으로 패스워드을 추측해보았다.<br><br>admin/admin, admin/AdMiN 등을 시도해보았지만, 결국엔 모두 실패하였다.</p><p>그래서 소스코드를 확인해보니,</p><p><img src="/images/pasted-63.png" alt="ba_weak_pwd.php의 소스코드 일부"></p><p>위와 같은 코드가 있었다.</p><p>ID 값이 test이며, Low Level일 때는 소문자 test을 패스워드로 하였을 때 성공이라고 뜬다.</p><p><img src="/images/pasted-64.png"></p><p>시도해보니, 로그인 성공을 볼 수 있었다.</p><p>문제를 풀기 위해선 ID값이 필요할 것 같은데… 없어서 할 수 없이 소스코드를 확인한 문제이다.<br><br>이 문제에선 dictionary password attack과 Brute force attack을 방어하기 위해 복잡한 패스워드를 가질 필요성이 있다는 것을 알려주고 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/">PHP</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/PHP/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/07/Broken-Auth-Weak-Passwords/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 15963번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/07/%EB%B0%B1%EC%A4%80-15963%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/07/%EB%B0%B1%EC%A4%80-15963%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sun, 07 Feb 2021 05:41:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CASIO&quot;&gt;&lt;a href=&quot;#CASIO&quot; class=&quot;headerlink&quot; title=&quot;CASIO&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15963&quot;&gt;CASIO&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;카시오 계산</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CASIO"><a href="#CASIO" class="headerlink" title="CASIO"></a><a href="https://www.acmicpc.net/problem/15963">CASIO</a></h1><p>카시오 계산기는 만능 계산기이다. 시험을 한 번이라도 쳐본 일곽인이라면, 이 카시오의 소중함에 대해서 뼈저리게 느껴보았을 것이다. 하지만, 이런 카시오에도 함정이 있다. 바로, 카시오 계산기는 배터리를 통해 돌아간다는 것이다.</p><p>송찬이는 시험을 치다가 갑자기 계산기의 배터리가 나가버렸다. 그래서 선생님께 배터리를 달라고 요구했는데, 요구하고 보니 카시오 계산기의 배터리가 어떤 종류인지 말을 안 해버렸다! 과연 선생님은 송찬이가 필요한 배터리 종류를 들고 왔을까?</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(<span class="number">1</span> <span class="keyword">if</span> n==m <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>삼항연산자로 깔끔하게 풀이하였다.<br><br>파이썬의 삼항연산자 형태는 <code>[True Value] if [Condition] else [False Value]</code>으로 이루어진다.</p><hr><h2 id="숏코딩-문제풀이"><a href="#숏코딩-문제풀이" class="headerlink" title="숏코딩 문제풀이"></a>숏코딩 문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">2</span>-<span class="built_in">len</span>(&#123;*<span class="built_in">input</span>().split()&#125;))</span><br></pre></td></tr></table></figure><p>두 개의 입력 중복을 확인하는 문제이다.<br><br>이 풀이는 딕셔너리의 Key 중복이 안된다는 점을 이용하였다.</p><p>입력 받은 값을 Key로 저장되는데 만약 같은 값이면 단 하나만 저장이 되기 때문에 len 함수를 찍어본다면 ‘1’로 출력하게 된다.</p><p>만약 두 개의 입력값이 서로 다른 값이면 2개의 Key가 저장이 되고, len 함수는 ‘2’를 출력할 것이다.</p><p>2개의 입력값이 중복이면 1, 아니면 0이므로 2와 len 함수의 출력값을 빼준다면 원하는 값을 얻을 수 있다.</p><p>이 문제에선 Dict를 이용했지만, set으로 이용할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      <category domain="https://lrtk-coder.github.io/tags/baekjoon/">baekjoon</category>
      
      <category domain="https://lrtk-coder.github.io/tags/backjoon-bronze4/">backjoon bronze4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/07/%EB%B0%B1%EC%A4%80-15963%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
