<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LRTK Blog</title>
    <link>https://lrtk-coder.github.io/</link>
    
    <atom:link href="https://lrtk-coder.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Coding, Security, IT News 등 정리한 블로그</description>
    <pubDate>Sat, 27 Feb 2021 13:08:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>XSS - Stored (Blog)</title>
      <link>https://lrtk-coder.github.io/2021/02/27/XSS-Stored-Blog/</link>
      <guid>https://lrtk-coder.github.io/2021/02/27/XSS-Stored-Blog/</guid>
      <pubDate>Sat, 27 Feb 2021 03:57:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제풀이&quot;&gt;&lt;a href=&quot;#문제풀이&quot; class=&quot;headerlink&quot; title=&quot;문제풀이&quot;&gt;&lt;/a&gt;문제풀이&lt;/h1&gt;&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Lo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-238.png"></p><p>form에 글에 입력하고 Submit 버튼을 클릭하면, 해당 글이 DB에 저장이 된다.</p><p>그리고 페이지는 DB에서 저장된 글을 가져와서 페이지로 반영을 한다.</p><p>이를 이용하여 XSS 코드를 DB에 저장하여 페이지에 반영하겠다.</p><p><img src="/images/pasted-239.png" alt="`&amp;ltimg src=# onerror=alert(1)&amp;gt`"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-240.png"></p><p>addslashes 함수로 DB에서 불려온 값의 <code>&#39;</code>, <code>&quot;</code>, <code>\</code>가 이스케이프 되는 것을 볼 수 있다.</p><p>addslashes 함수를 우회하는 방법은 Low에서 사용한 XSS 코드처럼 <code>&#39;</code>, <code>&quot;</code>, <code>\</code>을 사용하지 않고 XSS을 시도하면 된다.</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-241.png"></p><p>htmlspecialchars 함수로 특수문자가 HTML 엔티티로 이스케이프되면서 그대로 출력되는 모습을 볼 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/27/XSS-Stored-Blog/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (User-Agent)</title>
      <link>https://lrtk-coder.github.io/2021/02/27/XSS-Reflected-User-Agent/</link>
      <guid>https://lrtk-coder.github.io/2021/02/27/XSS-Reflected-User-Agent/</guid>
      <pubDate>Sat, 27 Feb 2021 03:34:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;User-Agent&quot;&gt;&lt;a href=&quot;#User-Agent&quot; class=&quot;headerlink&quot; title=&quot;User-Agent&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HT</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent">User-Agent</a></h1><p>사용자 에이전트 요청 헤더는 서버와 네트워크 피어가 요청하는 응용 프로그램, 운영 체제, 공급 업체 및 / 또는 버전을 식별 할 수있는 특성 문자열 사용자 에이전트</p><h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>XSS - Reflected (Referer) 문제와 똑같은 문제이다. 차이점이라면, Referer 헤더가 아닌 User-Agent 헤더를 이용하는 것이다.</p><p>바로 User-Agent을 프록시를 이용하여 XSS 코드를 삽입하여 페이지에 반영하겠다.</p><p><img src="/images/pasted-235.png" alt="`&amp;ltimg src=# onerror=alert(1)&amp;gt`"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-236.png"><br><code>&#39;</code>, <code>&quot;</code>, <code>\</code>의 앞에 <code>\</code>이 추가되어 이스케이프가 된 것을 볼 수 있었다.</p><p>addslashed 함수로 입력값을 이스케이프를 한 것으로 보인다.</p><p>해당 우회방법은 Low 방법대로 <code>&#39;</code>, <code>&quot;</code>, <code>\</code>를 사용 안하는 방법이 있다.</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-237.png"></p><p>htmlspecialchars 함수에 의해 특수 문자가 HTML 엔티티로 이스케이프되어 그대로 출력되는 것을 볼 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/27/XSS-Reflected-User-Agent/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 19944번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/27/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-19944%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/27/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-19944%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Sat, 27 Feb 2021 01:58:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;뉴비의-기준은-뭘까&quot;&gt;&lt;a href=&quot;#뉴비의-기준은-뭘까&quot; class=&quot;headerlink&quot; title=&quot;뉴비의 기준은 뭘까?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/19944&quot;&gt;뉴비의 기준은</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="뉴비의-기준은-뭘까"><a href="#뉴비의-기준은-뭘까" class="headerlink" title="뉴비의 기준은 뭘까?"></a><a href="https://www.acmicpc.net/problem/19944">뉴비의 기준은 뭘까?</a></h1><p>2020 INPC는 IGRUS 뉴비들을 위해 열리는 대회입니다. 하지만 영수 할아버지나 인용 할아버지와 같이 14학번이지만 마음만은 뉴비인 어르신들 때문에 대회장이 TLE들의 파티가 되자 뉴비의 기준을 정의하기로 하였습니다.</p><p>INPC 운영진들은 고심 끝에 뉴비를 1학년 혹은 2학년인 학생으로 정의 내렸고 뉴비를 정의하는 김에 올드비와 TLE도 정의 내리기로 하였습니다. 올드비는 N학년 이하이면서 뉴비가 아닌 학생으로 정의하기로 하였고 TLE은 뉴비도 아니고 올드비도 아닌 학생으로 정의하였습니다.</p><p>N과 M이 주어졌을 때, M학년이 뉴비인지 올드비인지 TLE인지 구별해 주세요.</p><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n, m &#x3D; map(int, input().split())</span><br><span class="line">print([[&#39;OLDBIE!&#39;, &#39;NEWBIE!&#39;][m &lt; 3], &#39;TLE!&#39;][n &lt; m])</span><br></pre></td></tr></table></figure><h3 id="풀이-설명"><a href="#풀이-설명" class="headerlink" title="풀이 설명"></a>풀이 설명</h3><p>문제 요약을 해보면,</p><ul><li>m이 1과 2일 때, NEWBIE! 출력</li><li>m이 n 이하면, OLDBIE! 출력</li><li>둘 다 아니면, TLE! 출력</li></ul><p>이것들을 파이썬으로 변환하면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n, m &#x3D; map(int, input().split())</span><br><span class="line">if m &lt; 3:</span><br><span class="line">print(&#39;NEWBIE!&#39;)</span><br><span class="line">elif m &lt;&#x3D; n:</span><br><span class="line">print(&#39;OLDBIE!&#39;)</span><br><span class="line">else:</span><br><span class="line">print(&#39;TLE!&#39;)</span><br></pre></td></tr></table></figure><p>가 된다.</p><p>이를 BOOL을 이용한 인덱싱으로 표현하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/27/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-19944%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (Referer)</title>
      <link>https://lrtk-coder.github.io/2021/02/25/XSS-Reflected-Referer/</link>
      <guid>https://lrtk-coder.github.io/2021/02/25/XSS-Reflected-Referer/</guid>
      <pubDate>Thu, 25 Feb 2021 17:44:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제풀이&quot;&gt;&lt;a href=&quot;#문제풀이&quot; class=&quot;headerlink&quot; title=&quot;문제풀이&quot;&gt;&lt;/a&gt;문제풀이&lt;/h1&gt;&lt;p&gt;XSS - Reflected (Back Button)과 같은 문제라고 봐도 되는 문제이다.&lt;/p&gt;
&lt;p&gt;&lt;img</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><p>XSS - Reflected (Back Button)과 같은 문제라고 봐도 되는 문제이다.</p><p><img src="/images/pasted-231.png"></p><p>Referer 헤더를 참고하여 페이지에 반영하는 사이트이다. 프록시를 이용하여 Referer 헤더에 XSS 코드를 삽입하면, 페이지에선 그대로 반영을 해 줄 것이다.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/xss_referer.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: XXX.XXX.XXX.XXX</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Referer</span>: &lt;img src=# onerror=alert(1)&gt;</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=qnpb44sfr6u9ofp3pni8vobuf5; security_level=0</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-232.png"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-233.png" alt="`Referer: &#39;&quot;\&lt;&gt;`"></p><p><code>&#39;</code>, <code>&quot;</code>, <code>\</code>의 앞에 <code>\</code>가 추가되어 이스케이프가 된 것을 보아 addslashes 함수에 의해 입력값이 이스케이프가 된다는 것을 알 수 있다.</p><p>이를 우회하기 위해 Low Level에서 사용한 XSS코드처럼 <code>&#39;</code>, <code>&quot;</code>를 사용하지 않고 XSS를 실행하면 된다.</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-234.png"></p><p>입력값의 특수 문자가 HTML 엔티티로 이스케이프가 되어 XSS 코드가 그대로 출력되는 모습이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/25/XSS-Reflected-Referer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 11549번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/25/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-23178117%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/25/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-23178117%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Thu, 25 Feb 2021 16:51:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Identifying-tea&quot;&gt;&lt;a href=&quot;#Identifying-tea&quot; class=&quot;headerlink&quot; title=&quot;Identifying tea&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Identifying-tea"><a href="#Identifying-tea" class="headerlink" title="Identifying tea"></a><a href="https://www.acmicpc.net/problem/11549">Identifying tea</a></h1><p>Blind tea tasting is the skill of identifying a tea by using only your senses of smell and taste.</p><p>As part of the Ideal Challenge of Pure-Tea Consumers (ICPC), a local TV show is organized. During the show, a full teapot is prepared and five contestants are handed a cup of tea each. The participants must smell, taste and assess the sample so as to identify the tea type, which can be: (1) white tea; (2) green tea; (3) black tea; or (4) herbal tea. At the end, the answers are checked to determine the number of correct guesses.</p><p>Given the actual tea type and the answers provided, determine the number of contestants who got the correct answer.</p><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b = [*<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())]</span><br><span class="line">print(b.count(a))</span><br></pre></td></tr></table></figure><p>Count 함수를 이용하여 특정값의 중복 수를 출력하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/25/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-23178117%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (PHP_SELF)</title>
      <link>https://lrtk-coder.github.io/2021/02/24/phpMyAdmin-BBCode-Tag-XSS/</link>
      <guid>https://lrtk-coder.github.io/2021/02/24/phpMyAdmin-BBCode-Tag-XSS/</guid>
      <pubDate>Wed, 24 Feb 2021 23:15:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;PHP-SELF&quot;&gt;&lt;a href=&quot;#PHP-SELF&quot; class=&quot;headerlink&quot; title=&quot;PHP_SELF&quot;&gt;&lt;/a&gt;PHP_SELF&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="PHP-SELF"><a href="#PHP-SELF" class="headerlink" title="PHP_SELF"></a>PHP_SELF</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">&#x27;PHP_SELF&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>현재 실행중인 파일(자신)의 경로 + 파일명을 담은 전역변수</li><li>웹에선 URL상의 경로가 출력됨.</li><li>CLI에서는 접근한 경로가 그대로 출력.</li></ul><h1 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-227.png"></p><p>first name과 last name에 값을 넣으면 그대로 출력하는 페이지이다.</p><p>이를 이용하여 XSS 코드를 반영하겠다.</p><p><img src="/images/pasted-228.png" alt="`&amp;ltimg src=# onerror=alert(1)&amp;gt`/`aa`"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-229.png" alt="`&#39;&quot;&amp;\`/`aa`"></p><p><code>&#39;</code>, <code>&quot;</code>, <code>\</code>의 앞에 <code>\</code>가 추가된 값으로 이스케이프된 것을 볼 수 있다.</p><p>아마 addslashes() 함수로 입력값에 대한 이스케이프를 진행 한 것으로 추측이 된다.</p><p><img src="/images/pasted-228.png" alt="`&amp;ltimg src=# onerror=alert(1)&amp;gt`/`aa`"></p><p>이를 우회하기 위해선 Low Level의 방식처럼 <code>&#39;</code>, <code>&quot;</code>, <code>\</code>를 사용 안하는 방법으로 XSS 코드를 입력할 수 있다.</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-230.png"></p><p>htmlspecialchars 함수로 특수문자가 HTML 엔티티로 이스케이프로 되어 XSS 코드가 제대로 반영이 안된 것을 볼 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/24/phpMyAdmin-BBCode-Tag-XSS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 15726번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/24/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14935%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/24/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14935%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Wed, 24 Feb 2021 22:51:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;이칙연산&quot;&gt;&lt;a href=&quot;#이칙연산&quot; class=&quot;headerlink&quot; title=&quot;이칙연산&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15726&quot;&gt;이칙연산&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;다음과 같이 세 수</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="이칙연산"><a href="#이칙연산" class="headerlink" title="이칙연산"></a><a href="https://www.acmicpc.net/problem/15726">이칙연산</a></h1><p>다음과 같이 세 수가 연속해서 주어졌을 때 한 번의 곱셈 기호와 한 번의 나눗셈 기호를 이용하여 만든 식 중 가장 큰 값을 출력하는 프로그램을 작성하시오. (세 수의 순서는 변하지 않는다.)</p><p>32 ☐ 16 ☐ 8</p><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">print(<span class="built_in">int</span>(<span class="built_in">max</span>(a*b/c, a/b*c)))</span><br></pre></td></tr></table></figure><h3 id="풀이-설명"><a href="#풀이-설명" class="headerlink" title="풀이 설명"></a>풀이 설명</h3><p>문제의 요점은 3개의 숫자를 곱셈과 나누기를 이용해서 계산했을 때 어떻게 계산해야 가장 큰 수가 나오는지를 구하는 문제이다.</p><ol><li>숫자1 * 숫자2 / 숫자3</li><li>숫자1 / 숫자2 * 숫자3</li><li>1과 2의 결과값 크키 비교 후 큰 수 출력.</li></ol><p>여기서, 많이 헤매는 부분은 <code>//</code>, <code>/</code> 둘 중 어느 것을 써야하는지이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()) <span class="comment"># 10 3 3 입력</span></span><br><span class="line">print(a*b/c, a/b*c)<span class="comment"># 10.0 10.0 출력</span></span><br><span class="line">print(a*b//c, a//b*c)<span class="comment"># 10 9 출력</span></span><br></pre></td></tr></table></figure><p><code>//</code>은 소수점을 버리기 때문에 값이 차이가 나는 것을 알 수 있다.</p><p>하지만 이 문제에서 왜 <code>/</code>을 쓰는지는 모르겠다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/24/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14935%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>알고리즘 정리 - 동적 계획법, 분할 정복</title>
      <link>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5/</link>
      <guid>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5/</guid>
      <pubDate>Wed, 24 Feb 2021 08:38:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h1&gt;&lt;h2 id=&quot;동적-계획법-Dynamic-Programming&quot;&gt;&lt;a href=&quot;#동적-계획법-Dynamic-Programming&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h1><h2 id="동적-계획법-Dynamic-Programming"><a href="#동적-계획법-Dynamic-Programming" class="headerlink" title="동적 계획법(Dynamic Programming)"></a>동적 계획법(Dynamic Programming)</h2><p>입력 크기가 작은 부분 문제들을 해결한 후, 해당 부분 문제의 해를 활용해서, 보다 큰 크기의 부분 문제를 해결, 최종적으로 전체 문제를 해결하는 알고리즘</p><p>상향식 접근법으로, 가장 최하위 해답을 구한 후, 이를 저장하고, 해당 결과값을 이용해서 상위 문제를 풀어가는 방식</p><p>Memoization 기법을 사용함.<br><br>Memoization이란? 프로그램 실행 시 이전에 계산한 값을 저장하여, 다시 계산하지 않도록 하여 전체 실행 속도를 빠르게 하는 기술</p><p>문제를 잘게 쪼갤 때, 부분 문제는 중복되어, 재활용됨.</p><h2 id="분할-정복"><a href="#분할-정복" class="headerlink" title="분할 정복"></a>분할 정복</h2><p>문제를 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 문제의 답을 얻는 알고리즘</p><p>하양식 접근법으로, 상위의 해답을 구하기 위해, 아래로 내려가면서 하위의 해답을 구하는 방식</p><p>문제를 잘게 쪼갤 때, 부분 문제는 서로 중복되지 않음.</p><h2 id="공통점"><a href="#공통점" class="headerlink" title="공통점"></a>공통점</h2><p>문제를 잘게 쪼개서, 가장 작은 단위로 분할</p><h2 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h2><ul><li><p>동적 계획법<br><br>부분 문제는 중복되어, 상위 문제 해결 시 재활용됨.<br><br>Memoization 기법 사용(부분 문제의 해답을 저장해서 재활용하는 최적화 기법으로 사용)</p></li><li><p>분할 정복<br><br>부분 문제는 서로 중보되지 않음.<br><br>Memoization 기법 사용 안함.</p></li></ul><h2 id="이해"><a href="#이해" class="headerlink" title="이해"></a>이해</h2><h3 id="동적-계획법-알고리즘-이해"><a href="#동적-계획법-알고리즘-이해" class="headerlink" title="동적 계획법 알고리즘 이해"></a>동적 계획법 알고리즘 이해</h3><ol><li>피보나치 수열<br><img src="/images/pasted-225.png"></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fibonacci(0) &#x3D; 0</span><br><span class="line">fibonacci(1) &#x3D; 1</span><br><span class="line">fibonacci(2) &#x3D; 1</span><br><span class="line">fibonacci(3) &#x3D; 2</span><br><span class="line">fibonacci(4) &#x3D; 3</span><br><span class="line">fibonacci(5) &#x3D; 5</span><br><span class="line">fibonacci(6) &#x3D; 8</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>Recursive call 활용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibo</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> fibo(num - <span class="number">1</span>) + fibo(num - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(fibo(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>fibo(4)를 구하기 위해선 fibo(3)과 fibo(2)가 필요하다.</p><p>fibo(3)은 fibo(2) + fibo(1)<br><br>fibo(2)은 fibo(1) + fibo(0)</p><p>fibo(4)를 구하기 위해선 fibo(0) 1개, fibo(1) 2개, fibo(2) 1개가 필요한데 이를 계속 계산하여 구하는 것은 비효율적이다.</p><p>이 부분을 해결하는 방법이 동적 계획법이다.</p><figure class="highlight python"><figcaption><span>DP 활용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibo_dp</span>(<span class="params">num</span>):</span></span><br><span class="line">    cache = [<span class="number">0</span> <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>)]</span><br><span class="line">    cache[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    cache[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num+<span class="number">1</span>):</span><br><span class="line">        cache[index] = cache[index<span class="number">-1</span>] + cache[index<span class="number">-2</span>]</span><br><span class="line">    <span class="keyword">return</span> cache[num]</span><br><span class="line"></span><br><span class="line">print(fibo_dp(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>리스트에 피보나치 수열을 계산 값을 저장을 하여 저장된 값을 사용하여 계산하여 효율을 높였다.</p><h3 id="분할-정복-알고리즘-이해"><a href="#분할-정복-알고리즘-이해" class="headerlink" title="분할 정복 알고리즘 이해"></a>분할 정복 알고리즘 이해</h3><p>퀵 정렬 알고리즘 참고</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/Basic/">Basic</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95/">동적 계획법</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5/">분할 정복</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>알고리즘 정리 - 퀵 정렬</title>
      <link>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC/</link>
      <guid>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC/</guid>
      <pubDate>Wed, 24 Feb 2021 00:13:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;퀵-정렬-Quick-Sort&quot;&gt;&lt;a href=&quot;#퀵-정렬-Quick-Sort&quot; class=&quot;headerlink&quot; title=&quot;퀵 정렬(Quick Sort)&quot;&gt;&lt;/a&gt;퀵 정렬(Quick Sort)&lt;/h1&gt;&lt;img src=&quot;https://m</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="퀵-정렬-Quick-Sort"><a href="#퀵-정렬-Quick-Sort" class="headerlink" title="퀵 정렬(Quick Sort)"></a>퀵 정렬(Quick Sort)</h1><img src="https://media.vlpt.us/images/rachell_lee/post/9d07118d-e83a-46c6-a1f9-7d667dbc09b5/quick_sort.gif"><p>기준점(pivot)을 정해서, 기준점보다 작은 데이터는 왼쪽(left), 큰 데이터는 오른쪽(right)으로 모으는 함수를 작성함.<br><br>각 왼쪽(left), 오른쪽(right)은 재귀용법을 사용해서 다시 동일 함수를 호출하여 위 작업을 반복함.<br><br>함수는 왼쪽(left) + 기준점(pivot) + 오른쪽(right)을 리턴함.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line">    left, right = <span class="built_in">list</span>(), <span class="built_in">list</span>()</span><br><span class="line">    pivot = data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">if</span> pivot &gt; data[index]:</span><br><span class="line">            left.append(data[index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right.append(data[index])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> qsort(left) + [pivot] + qsort(right)</span><br><span class="line"></span><br><span class="line">data_list = random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line">print(qsort(data_list))</span><br></pre></td></tr></table></figure><h2 id="알고리즘-분석"><a href="#알고리즘-분석" class="headerlink" title="알고리즘 분석"></a>알고리즘 분석</h2><p>병합 정렬과 유사, 시간 복잡도는 O(n log n)</p><p>단, 최악의 경우 pivot이 가장 크거나 작으면 모든 데이터를와 비교하게 된다. O(n<sup>2</sup>)</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/Basic/">Basic</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5/">분할 정복</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%ED%80%B5-%EC%A0%95%EB%A0%AC/">퀵 정렬</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/24/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>알고리즘 정리 - 재귀용법</title>
      <link>https://lrtk-coder.github.io/2021/02/23/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%9E%AC%EA%B7%80%EC%9A%A9%EB%B2%95/</link>
      <guid>https://lrtk-coder.github.io/2021/02/23/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%9E%AC%EA%B7%80%EC%9A%A9%EB%B2%95/</guid>
      <pubDate>Tue, 23 Feb 2021 19:10:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;재귀-용법-Recursive-Call-재귀-호출&quot;&gt;&lt;a href=&quot;#재귀-용법-Recursive-Call-재귀-호출&quot; class=&quot;headerlink&quot; title=&quot;재귀 용법(Recursive Call, 재귀 호출)&quot;&gt;&lt;/a&gt;재귀 용법(</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="재귀-용법-Recursive-Call-재귀-호출"><a href="#재귀-용법-Recursive-Call-재귀-호출" class="headerlink" title="재귀 용법(Recursive Call, 재귀 호출)"></a>재귀 용법(Recursive Call, 재귀 호출)</h1><p>함수 안에서 동일한 함수를 호출하는 형태</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><p>팩토리얼을 구하는 알고리즘</p><ul><li>2! = 1*2</li><li>3! = 1*2*3</li><li>4! = 1*2*3*4</li><li>n! = n * (n-1)!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> num * factorial(num<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">print(factorial(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>시간 복잡도/공간 복잡도는 O(n-1)이므로, O(n)이라는 시간 복잡도/공간 복잡도를 가진다.</p><h2 id="일반적인-형태"><a href="#일반적인-형태" class="headerlink" title="일반적인 형태"></a>일반적인 형태</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span>(<span class="params">입력</span>):</span></span><br><span class="line">    <span class="keyword">if</span> 입력 &gt; 일정값:</span><br><span class="line">        <span class="keyword">return</span> recursive(입력 또는 특정값)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> 결과값</span><br></pre></td></tr></table></figure><blockquote><p>파이썬의 경우 재귀함수의 길이는 1000번이 최대이다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/Basic/">Basic</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/">재귀함수</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/23/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%9E%AC%EA%B7%80%EC%9A%A9%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 14470번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/23/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14470%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/23/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14470%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Tue, 23 Feb 2021 16:43:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;전자레인지&quot;&gt;&lt;a href=&quot;#전자레인지&quot; class=&quot;headerlink&quot; title=&quot;전자레인지&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14470&quot;&gt;전자레인지&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;JOI 군은</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="전자레인지"><a href="#전자레인지" class="headerlink" title="전자레인지"></a><a href="https://www.acmicpc.net/problem/14470">전자레인지</a></h1><p>JOI 군은 식사 준비를 위해 A℃의 고기를 전자레인지로 B℃까지 데우려고 한다. 고기는 온도가 0℃보다 낮을 때 얼어 있고, 0℃보다 높을 때는 얼어 있지 않다. 온도가 정확히 0℃일 때 고기는 얼어 있을 수도, 얼어 있지 않을 수도 있다.</p><p>JOI 군은 가열할 때 고기가 아래의 규칙을 따라 데워진다고 가정하고, 고기를 데우는 데 걸리는 시간을 어림하기로 했다.</p><ul><li>고기가 얼어 있고 온도가 0℃ 미만일 때 : 온도가 C초에 1℃씩 오른다.</li><li>고기가 얼어 있고 온도가 정확히 0℃일 때 : 얼어 있지 않은 상태로 만드는(해동하는) 데 D초가 걸린다.</li><li>고기가 얼어 있지 않을 때 : 온도가 E초에 1℃씩 오른다.</li></ul><p>이 규칙을 토대로, 고기가 B℃까지 데워지는 데 몇 초가 걸리는지 구하라.</p><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d, e = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">open</span>(<span class="number">0</span>))</span><br><span class="line">print([-(a)*c + b*e + d, b*e - a*e][a&gt;<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="풀이-설명"><a href="#풀이-설명" class="headerlink" title="풀이 설명"></a>풀이 설명</h3><p>a : 고기온도<br><br>b : 목표온도<br><br>c : 얼어있는 고기를 1도씩 올리는 시간<br><br>d : 얼어있는 고기를 해동하는 시간<br><br>e : 얼지 않은 고기를 1도씩 올리는 시간</p><p>다음과 같은 시간을 구하고 값을 더해주면 목표 온도까지의 시간을 구할 수 있다.</p><p>0&gt;고기온도:</p><ul><li>언 고기을 0도까지 해동하는 시간 (a*c)</li><li>0도의 고기를 해동하는 시간 (d)</li><li>0도에서 목표온도까지 도달하는 시간 (b*e)</li></ul><p>0&lt;고기온도:</p><ul><li>고기온도에서 목표온도까지 도달하는 시간 (b*e - a*e)</li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://lrtk-coder.github.io/2021/02/23/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-14470%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (Login Form)</title>
      <link>https://lrtk-coder.github.io/2021/02/23/XSS-Reflected-Login-Form/</link>
      <guid>https://lrtk-coder.github.io/2021/02/23/XSS-Reflected-Login-Form/</guid>
      <pubDate>Tue, 23 Feb 2021 09:05:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제풀이&quot;&gt;&lt;a href=&quot;#문제풀이&quot; class=&quot;headerlink&quot; title=&quot;문제풀이&quot;&gt;&lt;/a&gt;문제풀이&lt;/h1&gt;&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Lo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-219.png"></p><p>로그인을 해야하지만, bee 계정과 LRTK 계정으로 로그인이 안된다.</p><p>현 로그인의 계정 정보도 없어서, SQL Injection이 되는 지 확인을 해보았다.</p><p><img src="/images/pasted-221.png" alt="Login: `&#39;`"></p><p>SQL의 에러메시지가 그대로 출력되는 것을 확인할 수 있었다. 이것을 이용하여 입력한 XSS 코드가 페이지에 반영할 수 있을 것 같다.</p><p><img src="/images/pasted-222.png" alt="Login: `&amp;lta$gthi&amp;lt/a&amp;gt&#39;`"></p><p>먼저 a태그를 넣어서 반영이 되는지 확인을 했는데 반영이 되는 것을 볼 수 있었다.</p><p><img src="/images/pasted-223.png" alt="Login: `&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt&#39;`"></p><p>SQL 에러 메시지 출력을 막으면 될 거 같은데 Medium과 High에서 방어 방법을 알아 보겠다.</p><h2 id="Medium-amp-High"><a href="#Medium-amp-High" class="headerlink" title="Medium &amp; High"></a>Medium &amp; High</h2><p><img src="/images/pasted-224.png"></p><p>SQL 에러가 더이상 출력이 안된다. 더이상 XSS은 시도할 수 없을 것 같다.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>($_COOKIE[<span class="string">&quot;security_level&quot;</span>])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;0&quot;</span> :</span><br><span class="line">    $data = no_check($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span> :</span><br><span class="line">        $data = sqli_check_1($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> :</span><br><span class="line">        $data = sqli_check_2($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        $data = no_check($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>sqli_check_1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqli_check_1</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addslashes($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addslashes 함수로 특정 특수 문자 앞에 <code>\</code>을 넣어서 이스케이프하였다.</p><figure class="highlight php"><figcaption><span>sqli_check_2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqli_check_2</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mysql_real_escape_string($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mysql_real_escape_string 함수를 이용하여 SQL에 사용되는 특수 문자 앞에 <code>\</code>을 넣어서 이스케이프 처리하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/23/XSS-Reflected-Login-Form/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>알고리즘 정리 - 버블, 선택, 삽입 정렬</title>
      <link>https://lrtk-coder.github.io/2021/02/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%9A%94/</link>
      <guid>https://lrtk-coder.github.io/2021/02/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%9A%94/</guid>
      <pubDate>Sat, 20 Feb 2021 18:44:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;알고리즘-연습-방법&quot;&gt;&lt;a href=&quot;#알고리즘-연습-방법&quot; class=&quot;headerlink&quot; title=&quot;알고리즘 연습 방법&quot;&gt;&lt;/a&gt;알고리즘 연습 방법&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;문제를 읽고 분석한다.&lt;/li&gt;
&lt;li&gt;간단하게 테스트용으</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="알고리즘-연습-방법"><a href="#알고리즘-연습-방법" class="headerlink" title="알고리즘 연습 방법"></a>알고리즘 연습 방법</h1><ol><li>문제를 읽고 분석한다.</li><li>간단하게 테스트용으로 매우 간단한 경우부터 복잡한 경우 순서대로 생각해보면서, 연습장과 펜을 이용하여 알고리즘을 생각해본다.</li><li>가능한 알고리즘이 보인다면, 구현할 알고리즘을 세부 항목으로 나누고, 문장으로 세부 항목을 나누어서 적어본다.</li><li>코드화하기 위해, 데이터 구조 또는 사용할 변수를 정리한다.</li><li>각 문장을 코드 레벨로 적는다.</li><li>데이터 구조 또는 사용할 변수가 코드에 따라 어떻게 변하는지 손으로 적으면서, 임의 데이터로 코드가 정상 동작하는지를 연습장과 펜으로 검증한다.</li></ol><h1 id="정렬-Sorting-이란"><a href="#정렬-Sorting-이란" class="headerlink" title="정렬(Sorting) 이란?"></a>정렬(Sorting) 이란?</h1><p>어떤 데이터들이 주어졌을 때 이를 정해진 순서대로 나열하는 것</p><blockquote><p>다양한 정렬 알고리즘 이해를 통해, 동일한 문제에 대해 다양한 알고리즘이 고안될 수 있음을 이해하고, 각 알고리즘간 성능 비교를 통해, 알고리즘 성능 분석에 대해서도 이해할 수 있음.</p></blockquote><h2 id="버블-정렬-Bubble-sort"><a href="#버블-정렬-Bubble-sort" class="headerlink" title="버블 정렬(Bubble sort)"></a>버블 정렬(Bubble sort)</h2><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://blog.kakaocdn.net/dn/prD1v/btqBTKVtoUB/10VcPGDRkfWdzCe7l9IVlk/img.gif"></p><p>두 인접한 데이터를 비교해서, 앞에 있는 데이터가 뒤에 있는 데이터보다 크면, 자리를 바꾸는 정렬 알고리즘</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        swap = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> index2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - index - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[index2] &gt; data[index2 + <span class="number">1</span>]:</span><br><span class="line">                data[index2], data[index2 + <span class="number">1</span>] = data[index2 + <span class="number">1</span>], data[index2]</span><br><span class="line">                swap = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> swap == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_list = random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line">    print(bubble_sort(data_list))</span><br></pre></td></tr></table></figure><h2 id="선택-정렬-Selection-sort"><a href="#선택-정렬-Selection-sort" class="headerlink" title="선택 정렬(Selection sort)"></a>선택 정렬(Selection sort)</h2><img src="https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif" width=100><ol><li>주어진 리스트 중에 최소값을 찾는다.</li><li>그 값을 맨 앞에 위치한 값과 교체한다(패스(pass)).</li><li>맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.</li></ol><p>위 순서를 반복하여 정렬하는 알고리즘</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> stand <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)<span class="number">-1</span>):</span><br><span class="line">        lowest = stand</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(stand+<span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[index] &lt; data[lowest]:</span><br><span class="line">                lowest = index</span><br><span class="line">        data[lowest], data[stand] = data[stand], data[lowest]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_list = random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line">    print(select_sort(data_list))</span><br></pre></td></tr></table></figure><h2 id="삽입-정렬-Insertion-sort"><a href="#삽입-정렬-Insertion-sort" class="headerlink" title="삽입 정렬(Insertion sort)"></a>삽입 정렬(Insertion sort)</h2><img src="https://upload.wikimedia.org/wikipedia/commons/4/42/Insertion_sort.gif"><p>자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> index2 <span class="keyword">in</span> <span class="built_in">range</span>(index+<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[index2] &lt; data[index2<span class="number">-1</span>]:</span><br><span class="line">                data[index2], data[index2<span class="number">-1</span>] = data[index2<span class="number">-1</span>], data[index2]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_list = random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line">    print(insertion_sort(data_list))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/Basic/">Basic</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Bubble-Sort/">Bubble Sort</category>
      
      <category domain="https://lrtk-coder.github.io/tags/Selection-Sort/">Selection Sort</category>
      
      <category domain="https://lrtk-coder.github.io/tags/Insertion-Sort/">Insertion Sort</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%95%EB%A6%AC-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%9A%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Data Structure - Tree</title>
      <link>https://lrtk-coder.github.io/2021/02/20/Data-Structure-Tree/</link>
      <guid>https://lrtk-coder.github.io/2021/02/20/Data-Structure-Tree/</guid>
      <pubDate>Sat, 20 Feb 2021 13:52:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Tree&quot;&gt;&lt;a href=&quot;#Tree&quot; class=&quot;headerlink&quot; title=&quot;Tree&quot;&gt;&lt;/a&gt;Tree&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-212.png&quot;&gt;&lt;br&gt;Node와 Branch를 이용해서, 사이클을</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><p><img src="/images/pasted-212.png"><br>Node와 Branch를 이용해서, 사이클을 이루지 않도록하는 데이터 구조</p><h2 id="알아둘-용어"><a href="#알아둘-용어" class="headerlink" title="알아둘 용어"></a>알아둘 용어</h2><ul><li>Node : 트리에서 데이터를 저장하는 기본 요소(데이터와 다른 연결된 노드에 대한 Branch 정보 포함)</li><li>Root Node : 트리 맨 위에 있는 Node</li><li>Parent Node : 어떤 노드의 다음 레벨에 연결된 노드</li><li>Child Node : 어떤 노드의 상위 레벨에 연결된 노드</li><li>Leaf Node(Teminal Node): Child Node가 하나도 없는 녿,</li><li>Sibling(Broder Node) : 동일한 Parent Node를 가진 노드</li><li>Level : 최상위 노드를 Level 0으로 했을 때, 하위 Branch로 연결된 노드의 깊이를 나타냄</li><li>Depth : 트리에서 Node가 가질 수 있는 최대 Level</li></ul><h2 id="이진-트리-vs-이진-탐색-트리-Binary-Search-Tree"><a href="#이진-트리-vs-이진-탐색-트리-Binary-Search-Tree" class="headerlink" title="이진 트리 vs 이진 탐색 트리(Binary Search Tree)"></a>이진 트리 vs 이진 탐색 트리(Binary Search Tree)</h2><h3 id="이진-트리"><a href="#이진-트리" class="headerlink" title="이진 트리"></a>이진 트리</h3><p>노드의 최대 Branch가 2인 트리</p><h3 id="이진-탐색-트리-BST"><a href="#이진-탐색-트리-BST" class="headerlink" title="이진 탐색 트리(BST)"></a>이진 탐색 트리(BST)</h3><p><img src="/images/pasted-213.png" alt="출처 : 백준 18240번 문제"></p><p>왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 가지고 있음.</p><h2 id="BST의-장단점"><a href="#BST의-장단점" class="headerlink" title="BST의 장단점"></a>BST의 장단점</h2><p><img src="https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-sorted-array-animation.gif" /><br><br>출처 : mathwarehouse.com</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>탐색 속도를 개선 할 수 있음.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>평균 시간 복잡도는 O(log n)이지만, 이는 트리가 균형이 잡혀있을 때의 평균 시간 복잡도이다.</li></ul><p><img src="http://www.fun-coding.org/00_Images/worstcase_bst.png" width="300" /><br><br>출처 : mathwarehouse.com</p><ul><li>최악의 경우, 링크드 리스트 등과 동일한 성늘을 보여줌 O(n)</li></ul>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/Tree/">Tree</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/20/Data-Structure-Tree/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 5893번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5893%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5893%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Fri, 19 Feb 2021 21:10:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;17배&quot;&gt;&lt;a href=&quot;#17배&quot; class=&quot;headerlink&quot; title=&quot;17배&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/5893&quot;&gt;17배&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;상근이는 이진수 곱셈에 어려</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="17배"><a href="#17배" class="headerlink" title="17배"></a><a href="https://www.acmicpc.net/problem/5893">17배</a></h1><p>상근이는 이진수 곱셈에 어려움을 겪는 여자친구를 위한 프로그램을 만들려고 한다.</p><p>상근이의 여자친구는 항상 이진수에 17을 곱한다. 즉, 이진수 N이 입력으로 들어오면 17을 곱한 다음 이진수로 출력하는 프로그램을 작성하시오.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">input</span>(), <span class="number">2</span>)*<span class="number">17</span>))[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="풀이-설명"><a href="#풀이-설명" class="headerlink" title="풀이 설명"></a>풀이 설명</h3><p>입력 조건 : n은 2진수이며 0이 없다. 자리수는 0&lt;n&lt;1000</p><p>출력 조건 : n의 17배를 2진수로 출력</p><ol><li>2진수 값 입력받기</li><li>10진수로 변환하여 곱하기 17</li><li>17배한 10진수를 이진수로 변환하여 출력.</li></ol>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-5893%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (HREF)</title>
      <link>https://lrtk-coder.github.io/2021/02/19/XSS-Reflected-HREF/</link>
      <guid>https://lrtk-coder.github.io/2021/02/19/XSS-Reflected-HREF/</guid>
      <pubDate>Fri, 19 Feb 2021 17:39:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제풀이&quot;&gt;&lt;a href=&quot;#문제풀이&quot; class=&quot;headerlink&quot; title=&quot;문제풀이&quot;&gt;&lt;/a&gt;문제풀이&lt;/h1&gt;&lt;h2 id=&quot;Low&quot;&gt;&lt;a href=&quot;#Low&quot; class=&quot;headerlink&quot; title=&quot;Low&quot;&gt;&lt;/a&gt;Lo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-200.png"><br>문제 제목 밑에 있는 글을 해석하니, “좋아하는 영화에 투표하려면 이름을 입력해야 합니다.” 라는 글이 있었다.</p><p>문제를 풀기 전 어떻게 작동하는지 확인하겠다.</p><p><img src="/images/pasted-201.png" alt="`/xss_href-2.php?name=LRTK&amp;action=vote`"></p><p>LRTK를 입력 후 Continue 버튼을 누르니, 파라미터로 name=LRTK, action=vote를 가지고 xss_href-2.php로 이동한다.</p><p>xss_href-2 페이지의 문제 제목 밑 글을 해석하니, “안녕하세요 LRTK, 좋아하는 영화에 투표 해주세요.<br>기억하세요, Tony Stark는 매번 이기고 싶어합니다 …” 라는 글을 볼 수 있었다.</p><p><img src="/images/pasted-202.png" alt="`/xss_href-3.php?movie=2&amp;name=LRTK&amp;action=vote`"><br>Iron Man에 투표를 하니, xss_href-3.php</p><p>내가 입력한 값은 xss_href-2.php에 페이지에 반영이 되니, 주 타겟으로 잡고 Xss를 시도하겠다.</p><p><img src="/images/pasted-203.png" alt="`/xss_href-2.php?name=&lt;a&gt;LRTK&lt;%2Fa&gt;&amp;action=vote`"><br>일단 a태그를 넣어서 입력한 값이 HTML에 태그로 반영이 되는지 확인하였다.</p><p><img src="/images/pasted-204.png"><br>문제 제목 밑 글에선 p태그로 인하여 입력한 a태그가 문자로 잡히는 것을 알 수 있었다.</p><p>하지만 입력값은 문제 제목 밑 글에서만 반영되는 것이 아니다.</p><p><img src="/images/pasted-207.png"><br>xss_href-3.php의 파라미터를 보면 name의 값으로 입력값을 보냈는 것을 볼 수 있다.</p><p>즉, xss_href-3.php로 가는 href의 값에 입력값으로 태그를 넣을 수 있다는 것이다.</p><p><img src="/images/pasted-208.png"><br>코드를 보니 입력값이 어떻게 들어가는지를 확인할 수 있었다.</p><p>a태그를 먼저 끝내고, Xss를 시도하겠다.</p><p><img src="/images/pasted-209.png" alt="`/xss_href-2.php?name=&lt;/a&gt;&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt&amp;action=vote`"><br>Xss이 성공한 것을 볼 수 있다.</p><h2 id="Medium-amp-High"><a href="#Medium-amp-High" class="headerlink" title="Medium &amp; High"></a>Medium &amp; High</h2><p><img src="/images/pasted-210.png" alt="`/xss_href-2.php?name=&amp;lt%2Fa&amp;gt&amp;lta&amp;gtLRTK&amp;lt%2Fa&amp;gt&amp;action=vote`"><br><img src="/images/pasted-211.png"></p><p>입력값이 URL 인코딩으로 처리가 된 것을 볼 수 있다.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hpp</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>($_COOKIE[<span class="string">&quot;security_level&quot;</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;0&quot;</span> :</span><br><span class="line">            $data = no_check($data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            $data = urlencode($data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            $data = urlencode($data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            $data = no_check($data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Medium과 High을 코드를 보니, urlencode 함수에 입력값을 넣어주는 것을 알 수 있었다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/19/XSS-Reflected-HREF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 13866번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-13866%EB%B2%88/</link>
      <guid>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-13866%EB%B2%88/</guid>
      <pubDate>Fri, 19 Feb 2021 14:34:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;팀-나누기&quot;&gt;&lt;a href=&quot;#팀-나누기&quot; class=&quot;headerlink&quot; title=&quot;팀 나누기&quot;&gt;&lt;/a&gt;팀 나누기&lt;/h1&gt;&lt;p&gt;4명의 친구가 탁구를 하고 있다. 각각은 정수형으로 표현된 스킬 레벨을 가지고 있고, 숫자가 높을수록 더</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="팀-나누기"><a href="#팀-나누기" class="headerlink" title="팀 나누기"></a>팀 나누기</h1><p>4명의 친구가 탁구를 하고 있다. 각각은 정수형으로 표현된 스킬 레벨을 가지고 있고, 숫자가 높을수록 더 좋은 플레이어다.</p><p>4명의 친구는 각각 두 명씩 구성된 두 팀을 구성하려고 한다. 게임이 더 흥미롭게 하기 위해서 팀의 스킬 레벨을 최대한 가깝게 유지하기를 원한다. 팀의 스킬 레벨은 팀원의 스킬 레벨의 합계이다.</p><p>그들은 탁구 선수로는 탁월하지만, 수학이나 컴퓨터와 같은 다른 것들에 능숙하지 않다. 팀의 스킬 레벨이 가능한 작은 차이를 갖도록 도와주자.</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [*<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())]</span><br><span class="line">print(<span class="built_in">abs</span>((a[<span class="number">3</span>]+a[<span class="number">0</span>]) - (a[<span class="number">2</span>]+a[<span class="number">1</span>]))))</span><br></pre></td></tr></table></figure><h3 id="풀이-설명"><a href="#풀이-설명" class="headerlink" title="풀이 설명"></a>풀이 설명</h3><p>입력 조건: 0 &lt;= a &lt;= b &lt;= c &lt;= d &lt;= 10<sup>4</sup></p><p>첫번째로 입력 받은 값이 무조건 작으니, 가장 큰 마지막과 더해주면 된다.</p><p>근데 이상한 점이 문제 제출 시 절대값으로 구해줘야 한다는 것이다.</p><p>조건을 보면 -가 나올 경우가 없어보인데도 말이다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/19/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-13866%EB%B2%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS - Reflected (Eval)</title>
      <link>https://lrtk-coder.github.io/2021/02/18/XSS-Reflected-Eval/</link>
      <guid>https://lrtk-coder.github.io/2021/02/18/XSS-Reflected-Eval/</guid>
      <pubDate>Thu, 18 Feb 2021 04:04:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Eval-함수&quot;&gt;&lt;a href=&quot;#Eval-함수&quot; class=&quot;headerlink&quot; title=&quot;Eval 함수&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Ref</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Eval-함수"><a href="#Eval-함수" class="headerlink" title="Eval 함수"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/eval">Eval 함수</a></h1><p>eval()은 문자로 표현된 JavaScript 코드를 실행하는 함수이다.</p><h1 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p><img src="/images/pasted-194.png" alt="`/xss_eval.php?date=Date()`"></p><p>URI의 파라미터 값을 보니 Data()라는 값을 보내주고 있는데 문제의 제목상 자바스크립트의 Data() 함수가 Eval에 문자열로 넘어진 것으로 판단이 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>XSS - Reflected (Eval)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The current date on your computer is:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">eval</span>(<span class="string">&quot;document.write(Date())&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>Thu Feb 18 2021 22:04:50 GMT+0900 (대한민국 표준시)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>혹시 몰라 페이지의 코드를 보니, 페이지의 코드 내 자바스크립트에 값을 넣어 준 것을 볼 수 있었다.</p><p><img src="/images/pasted-195.png" alt="`/xss_eval.php?date=document.cookie`"></p><p>이를 이용하여 Cookie 값을 페이지에 출력하였다.</p><p><img src="/images/pasted-196.png"><br><img src="/images/pasted-197.png" alt="`document.cookie)&quot;);eval(&quot;alert(1);&quot;)//`"></p><p>추가적으로 SQL Injection에서 사용하는 패턴으로 주석처리를 넣어서 alert창까지 띄어 보았다.</p><hr><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p><img src="/images/pasted-198.png" alt="`document.cookie)&quot;);eval(&quot;alert(1);&quot;)//`"></p><p>파라미터에 대한 처리가 있는지 Low에서 작동하였던 함수들이 실행이 안됐다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>XSS - Reflected (Eval)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The current date on your computer is:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">    eval(&quot;document.write(document.cookie)<span class="symbol">&amp;quot;</span>);eval(<span class="symbol">&amp;quot;</span>alert(1);<span class="symbol">&amp;quot;</span>)//)&quot;);</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>코드를 보니 <code>&quot;</code>가 HTML 엔티티로 이스케이프가 된 것을 확인 할 수 있었다.<br></p><p>아마 개발자가 화이트 리스트로 특수 문자를 지정하여 이스케이프를 했거나, htmlspacialchars() 함수를 사용하여 이스케이프 처리를 한 것으로 판단이 된다.</p><p>확인을 위해 htmlspacialchars() 함수가 이스케이프하는 특수 문자들을 넣어봤다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">    eval(&quot;document.write(<span class="symbol">&amp;#039;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span>)&quot;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>모두 HTML 엔티티로 이스케이프 처리가 되었다. 100% 확신 할 수 없지만, 특수문자를 배제하고 JS함수만을 이용하겠다.</p><p><img src="/images/pasted-195.png" alt="`/xss_eval.php?date=document.cookie`"></p><p>Low에서 사용하였던 document.cookie을 이용하여 쿠키를 출력하였다. 특수문자를 이스케이스 처리하는 것 만으로는 방어가 안된다는 것을 볼 수 있다.</p><hr><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p><img src="/images/pasted-199.png"></p><p>위에 나온 방법대로 모두 넣어봤지만, 실패하였다.</p><p>아마 파라미터 값이 Data()가 아니면, 실패값이 출력하도록 코딩이 되어 있는 것으로 판단된다.</p><hr><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;0&quot;</span> :</span><br><span class="line">  $data = no_check($data);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span> :</span><br><span class="line">  $data = xss_check_3($data);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">  $data = no_check($data);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>Low와 High는 파라미터 값을 그대로 받아왔다. Medium은 예상했던 것처럼 htmlspacialchars() 함수를 거치고 넘어오는 것을 확인 할 수 있었다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&quot;date&quot;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>($_COOKIE[<span class="string">&quot;security_level&quot;</span>] == <span class="string">&quot;2&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">&quot;date&quot;</span>] != <span class="string">&quot;Date()&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;font color=\&quot;red\&quot;&gt;Invalid input detected!&lt;/font&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>High에서는 파라미터 값이 Date()가 아니면 실패코드를 출력하게 조건문으로 처리하였다.</p>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/BeeBox/">BeeBox</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/BeeBox/">BeeBox</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/18/XSS-Reflected-Eval/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>백준 브론즈4 16431번 문제</title>
      <link>https://lrtk-coder.github.io/2021/02/17/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16431%EB%B2%88-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://lrtk-coder.github.io/2021/02/17/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16431%EB%B2%88-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Wed, 17 Feb 2021 22:49:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;베시와-데이지&quot;&gt;&lt;a href=&quot;#베시와-데이지&quot; class=&quot;headerlink&quot; title=&quot;베시와 데이지&quot;&gt;&lt;/a&gt;베시와 데이지&lt;/h1&gt;&lt;p&gt;농부 존은 소 베시와 소 데이지를 키우고 있습니다.&lt;/p&gt;
&lt;p&gt;두 소는 자유롭게 1,00</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="베시와-데이지"><a href="#베시와-데이지" class="headerlink" title="베시와 데이지"></a>베시와 데이지</h1><p>농부 존은 소 베시와 소 데이지를 키우고 있습니다.</p><p>두 소는 자유롭게 1,000 × 1,000 2차원 격자 목초지를 누비며 놀고 있습니다. 농부 존이 종을 치면 베시와 데이지가 농부 존이 있는 곳으로 달려갑니다. </p><p><img src="/images/pasted-193.png"></p><p>베시가 B에 있을 때 1초 후에 움직일 수 있는 칸과 데이지가 D에 있을 때 1초 후에 움직일 수 있는 칸을 나타낸 그림</p><p>베시는 1초 후에 꼭짓점을 공유하는 8개의 칸 중 하나로 이동할 수 있고 데이지는 1초 후에 변을 공유하는 4개의 칸 중 하나로 이동할 수 있습니다. 칸들은 충분히 넓어서 칸 하나에도 베시와 데이지 그리고 존이 같이 서 있을 수 있습니다. </p><p>베시와 데이지 두 소 모두 최단 경로로 존에게 갈 때 어떤 소가 더 빨리 도착할까요?</p><hr><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l = <span class="keyword">lambda</span>:<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">a = <span class="built_in">abs</span></span><br><span class="line"></span><br><span class="line">b_row, b_col = l()</span><br><span class="line">d_row, d_col = l()</span><br><span class="line">j_row, j_col = l()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a(b_row - j_row) &gt; a(b_col - j_col):</span><br><span class="line">    b = (a(b_row - j_row)-a(b_col - j_col)) + a(b_col - j_col)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    b = (a(b_col - j_col)-a(b_row - j_row)) + a(b_row - j_row)</span><br><span class="line"></span><br><span class="line">d = a(d_row - j_row) + a(d_col - j_col)</span><br><span class="line"></span><br><span class="line">print([[<span class="string">&#x27;bessie&#x27;</span>, <span class="string">&#x27;tie&#x27;</span>][b==d], <span class="string">&#x27;daisy&#x27;</span>][b &gt; d])</span><br></pre></td></tr></table></figure><h3 id="문제풀이-설명"><a href="#문제풀이-설명" class="headerlink" title="문제풀이 설명"></a>문제풀이 설명</h3><ul><li><p>이동한 1칸 당 1초</p></li><li><p>베시는 위아래, 대각선으로 1칸 씩 움직인다고 한다. 이를 숫자로 표현했을 때,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">위: [+1, 0]</span><br><span class="line">아래: [-1, 0]</span><br><span class="line">대각선 : [+1, +1], [+1, -1], [-1, +1], [-1, -1]</span><br></pre></td></tr></table></figure><p>으로 표현이 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">위: [1, 0]</span><br><span class="line">아래: [1, 0]</span><br><span class="line">대각선 : [1, 1]</span><br></pre></td></tr></table></figure><p>하지만, 문제의 답은 각자의 위치에서 존까지의 최소 이동 시간을 구하는게 목적임으로 절대값으로 표현하겠다.</p></li><li><p>데이지는 위아래 1칸 씩만 움직일 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">위: [1, 0]</span><br><span class="line">아래: [0, 1]</span><br></pre></td></tr></table></figure></li><li><p>이동해야할 거리<br><br>이동할 거리는 각 가로세로와 존의 가로세로을 뺀 값을 절대값으로 변환하면 얻을 수 있다. 여기서 데이지는 어차피 위아래로 밖에 움직이지 못하기 때문에 존의 가로세로을 뺀 절대값에서 각 값을 더해주면 총 이동거리가 나온다.<br><br>베시는 대각선이 있기 때문에 이를 계산하기 위해 조건을 걸어줘야한다.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A1%A0%EC%A6%884/">브론즈4</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80/">백준</category>
      
      <category domain="https://lrtk-coder.github.io/tags/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884/">백준 브론즈4</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/17/%EB%B0%B1%EC%A4%80-%EB%B8%8C%EB%A1%A0%EC%A6%884-16431%EB%B2%88-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OWASP TOP 10 A2 - Broken Authentication</title>
      <link>https://lrtk-coder.github.io/2021/02/17/OWASP-TOP-10-A2-Broken-Authentication/</link>
      <guid>https://lrtk-coder.github.io/2021/02/17/OWASP-TOP-10-A2-Broken-Authentication/</guid>
      <pubDate>Wed, 17 Feb 2021 21:43:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Broken-Authentication&quot;&gt;&lt;a href=&quot;#Broken-Authentication&quot; class=&quot;headerlink&quot; title=&quot;Broken Authentication&quot;&gt;&lt;/a&gt;Broken Authentication&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Broken-Authentication"><a href="#Broken-Authentication" class="headerlink" title="Broken Authentication"></a>Broken Authentication</h1><p>인증 및 세션 관리와 관련된 애플리케이션 기능이 종종 잘못 구현되어 공격자가 암호, 키, 세션 토큰을 위험에 노출 시킬 수 있거나 일시적인 또는 영구적으로 다른 사용자의 권한 획득을 위해 구현 상 결함을 악용하도록 허용함.</p><h2 id="공격요인"><a href="#공격요인" class="headerlink" title="공격요인"></a>공격요인</h2><p>공격자는 자격 증명 자료, 기본 관리 계정 목록, 자동화된 무차별 대입 및 사전 공격 툴, 고급 GPU 크래킹 툴을 통해 수억 개의 유효한 사용자명 및 암호 조합에 접근할 수 있음.</p><p>세션 관리 공격은 특히 만료되지 않은 세션 토큰과 관련하여 잘 알려져 있음.</p><h2 id="보안-취약점"><a href="#보안-취약점" class="headerlink" title="보안 취약점"></a>보안 취약점</h2><p>대부분의 ID 및 접근 제어의 설계와 구현으로 인해 취약한 인증이 광범위하게 나타남.</p><p>세션 관리는 인증 및 접근 제어의 기반이며, 모든 상태를 저장하는 애플리케이션에 있음.</p><p>공격자는 수동으로 취약한 인증을 탐지하고 비밀번호 목록을 가진 툴과 사전 기반 공격으로 침투할 수 있음.</p><h2 id="영향"><a href="#영향" class="headerlink" title="영향"></a>영향</h2><p>공격자는 시스템을 손상시킬 수 있는 소수의 계정들이나 하나의 관리자 계정에만 접근하면 됨.</p><p>애플리케이션의 도메인에 따라 돈세탁, 사기, 신원 도용이 허용되거나 법적으로 보호되어야 하는 기밀 정보가 공개될 수 있음.</p><h2 id="취약점-확인-방법"><a href="#취약점-확인-방법" class="headerlink" title="취약점 확인 방법"></a>취약점 확인 방법</h2><p>인증과 관련된 공격으로부터 보호하기 위해서 사용자의 신원, 인증 및 세션을 관리하는 것이 매우 중요함.</p><p><strong>취약한 공격 목록</strong></p><ul><li>공격자가 유효한 사용자 이름과 비밀번호를 가진 상태에서 계정 정보 삽입과 같은 자동화 공격을 허용함.</li><li>무차별 공격 또는 기타 자동화 공격을 허용함.</li><li>“Password1” 또는 “admin/admin”과 같은 기본 암호, 약한 암호 또는 잘 알려진 암호를 허용함.</li><li>안전하지 않게 만들어진 “지식 기반 답변”과 같은 취약하거나 효과가 없는 자격 증명 복구나 비밀번호 복구를 허용함.</li><li>평문, 암호화되거나 취약한 해쉬 비밀번호를 사용함. (참조 : OWASP TOP 10 2017 A3 Sensitive Data Exposure)</li><li>다중 인증이 없거나 비효율적임.</li><li>세션 ID가 URL에 노출됨.(e.g. URL Rewriting)</li><li>세션 ID를 제대로 무효화 시키지 않아거나, 로그아웃이나 비활성기간 중에 사용자 세션 및 인증 토큰(e.g. SSO 토큰)이 제대로 무효화 되지 않았음.</li></ul><h2 id="보안-대책"><a href="#보안-대책" class="headerlink" title="보안 대책"></a>보안 대책</h2><ul><li>가능한 경우, 다중 인증을 구현하여 자동화된 계정 정보 삽입, 무차별 공격, 탈취된 계정 정보 재사용 공격을 예방함.</li><li>admin 계정이나 중요한 계정의 경우 기본 계정 정보를 사용하여 제공하거나 배포하지 말아야함.</li><li>비밀번호를 생성하거나 변경할 때 <a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">최악의 TOP 10000개 비밀번호 목록</a> 이외로 설정하도록 하는 것과 같은 약한 비밀번호 검사를 해야함.</li><li><a href="https://pages.nist.gov/800-63-3/sp800-63b.html#memsecret">NIST SP800 memsecret</a>에 따라 암호 길이, 복잡성 및 순환 정책 또는 다른 최신 정책, 근거 기반 암호 정책을 조정함.</li><li>계정 열거 공격에 대한 대비로 모든 결과에 대해 동일한 메시지를 사용하여 등록, 계정 정보 복구, API 경로를 강화해야함.</li><li>로그인 실패에 대한 제한이나 시간 연기를 해야함. 모든 실패에 대해 로그를 남기고 계정 정보 삽입, 무차별 공격, 다른 공격들이 탐지되면 관리자에게 알람이 오도록 설정해야함.</li><li>로그인 이후에 예측 불허한 무작위 세션 ID를 생성하는 서버 측의 안전한 내장 세션 관리자를 사용해야 함. 세션 ID는 URL에 없어야 하며, 매우 안전하게 보관되어야 하고 로그아웃 유휴 및 시간 초과 이후 무효가 되어야 함.</li></ul>]]></content:encoded>
      
      
      <category domain="https://lrtk-coder.github.io/categories/Security/">Security</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/">Web</category>
      
      <category domain="https://lrtk-coder.github.io/categories/Security/Web/OWASP-TOP-10/">OWASP TOP 10</category>
      
      
      <category domain="https://lrtk-coder.github.io/tags/OWASP/">OWASP</category>
      
      
      <comments>https://lrtk-coder.github.io/2021/02/17/OWASP-TOP-10-A2-Broken-Authentication/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
